#!/usr/bin/env python3

# Copyright (c) 2014,2018 ADLINK Technology Inc.
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors: Gabriele Baldoni, ADLINK Technology Inc. - Base plugins set

import sys
import os
import uuid
import psutil
import json
import time
import signal
from fog05.interfaces.States import State
from fog05.interfaces.RuntimePluginFDU import *
from fog05 import Yaks_Connector
from NativeFDU import NativeFDU
from jinja2 import Environment
from fog05.DLogger import DLogger
from mvar import MVar


class Native(RuntimePluginFDU):

    def __init__(self, name, version, plugin_uuid, manifest):
        super(Native, self).__init__(name, version, plugin_uuid, manifest)
        self.pid = os.getpid()
        self.var = MVar()

        self.wait_dependencies()

        osinfo = self.connector.loc.actual.get_node_os_info(self.node)
        self.operating_system = osinfo.get('name')

        self.logger.info(
            '__init__()', ' Hello from Native Plugin - Running on {}'.format(self.operating_system))
        file_dir = os.path.dirname(__file__)
        self.DIR = os.path.abspath(file_dir)

        self.agent_conf = self.connector.loc.actual.get_node_configuration(self.node)
        self.BASE_DIR = self.agent_conf.get('agent').get('path')
        self.LOG_DIR = 'logs'
        self.STORE_DIR = 'apps'
        self.configuration = manifest.get('configuration',{})
        signal.signal(signal.SIGINT, self.__catch_signal)
        signal.signal(signal.SIGTERM, self.__catch_signal)


    def __catch_signal(self, signal, _):
        if signal in [2,15]:
            self.var.put(signal)

    def start_runtime(self):

        if self.os.dir_exists(self.BASE_DIR):
            self.logger.info('start_runtime()', ' Native Plugin - Dir exists!')
            if not self.os.dir_exists(os.path.join(self.BASE_DIR, self.STORE_DIR)):
                self.os.create_dir(os.path.join(self.BASE_DIR, self.STORE_DIR))
            if not self.os.dir_exists(os.path.join(self.BASE_DIR, self.LOG_DIR)):
                self.os.create_dir(os.path.join(self.BASE_DIR, self.LOG_DIR))
        else:
            self.logger.info('start_runtime()', 'Native Plugin - Dir not exists!')
            self.os.create_dir(os.path.join(self.BASE_DIR))
            self.os.create_dir(os.path.join(self.BASE_DIR, self.STORE_DIR))
            self.os.create_dir(os.path.join(self.BASE_DIR, self.LOG_DIR))


        self.connector.loc.desired.observe_node_runtime_fdus(self.node, self.uuid, self.__fdu_observer)


        self.manifest.update({'pid': self.pid})
        self.manifest.update({'status': 'running'})
        self.connector.loc.actual.add_node_plugin(self.node, self.uuid, self.manifest)

        self.logger.info('start_runtime()', ' Native Plugin - Started...')

        r = self.var.get()
        self.stop_runtime()
        self.connector.close()
        exit(0)

    def stop_runtime(self):
        self.logger.info('stopRuntime()', ' Native Plugin - Destroy running BE')
        for k in list(self.current_fdus.keys()):
            fdu = self.current_fdus.get(k)
            try:
                self.__force_fdu_termination(k)
                if fdu.get_status() == State.DEFINED:
                    self.undefine_fdu(k)
            except Exception as e:
                self.logger.error('stop_runtime()', 'Error {}, continuing'.format(e))
                pass
        self.logger.info('stopRuntime()', '[ DONE ] Native Plugin - Bye')
        return True

    def define_fdu(self, fdu_record):

        fdu = NativeFDU(fdu_record)
        fdu_uuid = fdu.get_fdu_id()
        instance_id = fdu.get_uuid()

        if instance_id in self.current_fdus:
            self.logger.error('define_fdu()', '[ ERRO ] LXD Plugin - Instance with ID {} already defined!!'.format(instance_id))
            self.write_fdu_error(fdu_uuid, instance_id, 0, 'Instance with this ID {} already exists!'.format(instance_id))


        out_file = 'native_{}.log'.format(instance_id)
        self.logger.info('define_fdu()', ' Native Plugin - Define BE FDU')
        self.logger.info('define_fdu()', ' Native Plugin - FDU is {}'.format(fdu))

        if fdu.image is not None:
            zip_name = fdu.get_image_uri().split('/')[-1]
            zip_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, zip_name)
            dest = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid)
            # entity.source = os.path.join(dest,entity.command)

            # if self.operating_system.lower() == 'linux':
            #     if zip_name.endswith('.tar.gz'):
            #         unzip_cmd = 'tar -zxvf {} -C {}'.format(zip_file, dest)
            #     else:
            #         unzip_cmd = 'unzip {} -d {}'.format(zip_file, dest)
            # elif self.operating_system.lower() == 'windows':
            #     unzip_cmd = 'Expand-Archive -Path {} -DestinationPath {}'.format(zip_file, dest)
            # else:
            #     unzip_cmd = ''

            self.os.create_dir(os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid))

            if fdu.get_image_uri().startswith('http'):
                self.os.download_file(fdu.get_image_uri(), os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, zip_name))
            elif fdu.get_image_uri().startswith('file://'):
                cmd = 'cp {} {}'.format(fdu.get_image_uri()[len('file://'):], os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, zip_name))
                self.os.execute_command(cmd, blocking=True, external=False)

            fdu.source = dest
        else:
            fdu.source = None

        fdu.set_status(State.DEFINED)
        self.current_fdus.update({instance_id: fdu})
        self.update_fdu_status(fdu_uuid, instance_id, 'DEFINE')
        self.logger.info('define_fdu()', ' Native Plugin - Defined BE FDU uuid {}'.format(instance_id))

    def undefine_fdu(self, instance_uuid):
        self.logger.info('undefine_fdu()', ' Native Plugin - Undefine BE FDU uuid {}'.format(instance_uuid))
        fdu = self.current_fdus.get(instance_uuid, None)
        if fdu is None:
            self.logger.error('undefine_fdu()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('FDU not existing',
                                             'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
        elif fdu.get_status() != State.DEFINED:
            self.logger.error('undefine_fdu()', 'Native Plugin - FDU state is wrong, or transition not allowed')
            raise StateTransitionNotAllowedException('FDU is not in DEFINED state',
                                                     'FDU {} is not in DEFINED state'.format(instance_uuid))
        else:
            fdu_uuid = fdu.get_fdu_id()
            if self.get_local_instances(fdu_uuid) == 1:
                self.os.remove_dir(os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid))

            self.current_fdus.pop(instance_uuid, None)
            self.connector.loc.actual.remove_node_fdu(self.node, self.uuid, fdu_uuid, instance_uuid)
            self.logger.info('undefine_fdu()', '[ DONE ] Native Plugin - Undefine BE FDU uuid {}'.format(instance_uuid))

    def configure_fdu(self, instance_uuid):

        self.logger.info('configure_fdu()', ' Native Plugin - Configure BE FDU uuid {}'.format(instance_uuid))
        fdu = self.current_fdus.get(instance_uuid, None)
        if fdu is None:
            self.logger.error('configure_fdu()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('FDU not existing',
                                             'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
        elif fdu.get_status() != State.DEFINED:
            self.logger.error('configure_fdu()', 'FDU Plugin - Entity state is wrong, or transition not allowed')
            raise StateTransitionNotAllowedException('FDU is not in DEFINED state',
                                                     'FDU {} is not in DEFINED state'.format(instance_uuid))
        else:
            fdu_uuid = fdu.get_fdu_id()
            out_file = 'native_{}.log'.format(instance_uuid)
            out_file = os.path.join(self.BASE_DIR, self.LOG_DIR, out_file)
            fdu.outfile = out_file
            native_dir = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
            self.os.create_dir(native_dir)
            self.os.create_file(fdu.outfile)

            if fdu.source is not None:
                zip_name = fdu.get_image_uri().split('/')[-1]
                zip_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, zip_name)
                if self.operating_system.lower() == 'linux':
                    if zip_name.endswith('.tar.gz'):
                        unzip_cmd = 'tar -zxvf {} -C {}'.format(zip_file, native_dir)
                    else:
                        unzip_cmd = 'unzip {} -d {}'.format(zip_file, native_dir)
                elif self.operating_system.lower() == 'windows':
                    unzip_cmd = 'Expand-Archive -Path {} -DestinationPath {}'.format(zip_file, native_dir)
                else:
                    unzip_cmd = ''
                self.os.execute_command(unzip_cmd, blocking=True, external=True)

            fdu.on_configured('')

            self.logger.info('configure_fdu()', ' Native Plugin - FDU is {}'.format(fdu))

            self.current_fdus.update({instance_uuid: fdu})
            self.update_fdu_status(fdu_uuid, instance_uuid, 'CONFIGURE')
            self.logger.info('configure_fdu()', '[ DONE ] Native Plugin - Configure BE FDU uuid {}'.format(instance_uuid))

    def clean_fdu(self, instance_uuid):
        self.logger.info('clean_fdu()', ' FDU Plugin - Clean BE uuid {}'.format(instance_uuid))
        fdu = self.current_fdus.get(instance_uuid, None)
        if fdu is None:
            self.logger.error('clean_fdu()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('FDU not existing',
                                             'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
        elif fdu.get_status() != State.CONFIGURED:
            self.logger.error('clean_fdu()', 'Native Plugin - FDU state is wrong, or transition not allowed')
            raise StateTransitionNotAllowedException('FDU is not in CONFIGURED state',
                                                     'FDU {} is not in CONFIGURED state'.format(instance_uuid))
        else:
            fdu_uuid = fdu.get_fdu_id()
            self.os.remove_file(fdu.outfile)
            native_dir = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
            self.os.remove_dir(native_dir)

            fdu.on_clean()
            self.current_fdus.update({instance_uuid: fdu})
            self.update_fdu_status(fdu_uuid, instance_uuid, 'DEFINE')
            self.logger.info('clean_fdu()', '[ DONE ] Native Plugin - Clean BE uuid {}'.format(instance_uuid))


    def run_fdu(self, instance_uuid):
        self.logger.info('run_fdu()', ' Native Plugin - Starting BE uuid {}'.format(instance_uuid))
        fdu = self.current_fdus.get(instance_uuid, None)
        if fdu is None:
            self.logger.error('run_fdu()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('FDU not existing',
                                             'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
        elif fdu.get_status() != State.CONFIGURED:
            self.logger.error('run_fdu()', 'Native Plugin - FDU state is wrong, or transition not allowed')
            raise StateTransitionNotAllowedException('FDU is not in CONFIGURED state',
                                                     'FDU {} is not in CONFIGURED state'.format(instance_uuid))
        else:
            self.logger.info('run_fdu()', 'Native Plugin - FDU is {}'.format(fdu))
            fdu_uuid = fdu.get_fdu_id()
            if fdu.source is not None:
                native_dir = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
                source_dir = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
                pid_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, instance_uuid)
                run_script = self.__generate_run_script(fdu.cmd, fdu.args, source_dir, pid_file)
                if self.operating_system.lower() == 'linux':
                    self.os.store_file(run_script, native_dir, '{}_run.sh'.format(instance_uuid))
                    chmod_cmd = 'chmod +x {}'.format(os.path.join(native_dir, '{}_run.sh'.format(instance_uuid)))
                    self.os.execute_command(chmod_cmd, blocking=True, external=False)
                    cmd = '{}'.format(os.path.join(native_dir, '{}_run.sh'.format(instance_uuid)))
                elif self.operating_system.lower() == 'windows':
                    self.os.store_file(run_script, native_dir, '{}_run.ps1'.format(instance_uuid))
                    cmd = '{}'.format(os.path.join(native_dir, '{}_run.ps1'.format(instance_uuid)))
                else:
                    cmd = ''
                process = self.__execute_command(cmd, fdu.outfile)
                time.sleep(1)
                pid_file = '{}.pid'.format(pid_file)
                # pid_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, pid_file)
                pid = int(self.os.read_file(pid_file))
                fdu.on_start(pid, process)
            else:
                # try to inject the pid file if script use {{pid_file}}
                '''
                This make possible to add on the launch file of you native application that fog05 can inject the pid output file
                in this way is possible to fog05 to correct send signal to your application, in the case the {{pid_file}} is not defined the script
                will not be modified
                '''
                if self.operating_system.lower() == 'linux':
                        native_dir = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
                        f_name = '{}_run.sh'.format(instance_uuid)
                        pid_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, instance_uuid)
                        template_xml = self.os.read_file(os.path.join(self.DIR, 'templates', 'run_native_unix2.sh'))
                        na_script = Environment().from_string(template_xml)
                        cmd = '{} {}'.format(fdu.cmd, ' '.join(fdu.args))
                        na_script = na_script.render(command=cmd, outfile=pid_file, path=native_dir)
                        self.logger.info('run_fdu()', '[ INFO ] Lenght of runscript is {}'.format(len(na_script)))
                        self.os.store_file(na_script, native_dir, f_name)
                        chmod_cmd = 'chmod +x {}'.format(os.path.join(native_dir, f_name))
                        self.os.execute_command(chmod_cmd, blocking=True, external=False)
                        cmd = '{}'.format(os.path.join(native_dir, f_name))

                elif self.operating_system.lower() == 'windows':
                    native_dir = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
                    pid_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, instance_uuid)
                    run_script = self.__generate_run_script(fdu.cmd, fdu.args, None, pid_file)
                    self.logger.info('run_fdu()', '[ INFO ] PowerShell script is {}'.format(run_script))
                    self.os.store_file(run_script, native_dir, '{}_run.ps1'.format(instance_uuid))
                    cmd = '{}'.format(os.path.join(native_dir, '{}_run.ps1'.format(instance_uuid)))

                self.logger.info('run_fdu()', 'Command is {}'.format(cmd))
                process = self.__execute_command(cmd, fdu.outfile)
                fdu.on_start(process.pid, process)

            self.current_fdus.update({instance_uuid: fdu})
            self.update_fdu_status(fdu_uuid, instance_uuid, 'RUN')
            self.logger.info('run_fdu()', '[ DONE ] Native Plugin - Running BE uuid {}'.format(instance_uuid))
            return True

    def stop_fdu(self, instance_uuid):
        self.logger.info('stop_fdu()', ' Native Plugin - Stop BE uuid {}'.format(instance_uuid))
        fdu = self.current_fdus.get(instance_uuid, None)
        if fdu is None:
            self.logger.error('stop_fdu()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('FDU not existing',
                                             'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
        elif fdu.get_status() != State.RUNNING:
            self.logger.error('stop_fdu()', 'Native Plugin - FDU state is wrong, or transition not allowed')
            raise StateTransitionNotAllowedException('FDU is not in RUNNING state',
                                                     'FDU {} is not in RUNNING state'.format(instance_uuid))
        else:
            fdu_uuid = fdu.get_fdu_id()
            if fdu.source is None:

                pid = fdu.pid
                self.logger.info('stop_fdu()', 'FDU source is none')
                self.logger.info('stop_fdu()', 'Native Plugin - PID {}'.format(pid))
                self.os.send_sig_int(pid)
                f_name = '{}.pid'.format(instance_uuid)
                f_path = os.path.join(self.BASE_DIR, self.STORE_DIR)
                pid_file = os.path.join(f_path, f_name)
                self.logger.info('stop_fdu()', 'Check if PID file exists {}'.format(pid_file))
                if self.os.file_exists(pid_file):
                    pid = int(self.os.read_file(pid_file))
                    self.logger.info('stop_fdu()', 'Native Plugin - PID {}'.format(pid))
                    self.os.execute_command('sudo pkill -9 -P {}'.format(pid),blocking=True, external=False)
                    if self.os.check_if_pid_exists(pid):
                        self.os.send_sig_int(pid)
                        time.sleep(3)
                    if  self.os.check_if_pid_exists(pid):
                        self.os.send_sig_kill(pid)
                pid_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, '{}.pid'.format(instance_uuid))
                self.logger.info('stop_fdu()', 'Check if PID file exists {}'.format(pid_file))
                if self.os.file_exists(pid_file):
                    pid = int(self.os.read_file(pid_file))
                    self.logger.info('stop_fdu()', 'Native Plugin - PID {}'.format(pid))
                    self.os.execute_command('sudo pkill -9 -P {}'.format(pid), blocking=True, external=False)
                    if self.os.check_if_pid_exists(pid):
                        self.os.send_sig_int(pid)
                        time.sleep(3)
                    if self.os.check_if_pid_exists(pid):
                        self.os.send_sig_kill(pid)
            else:

                self.logger.info('stop_fdu()', 'Instance source is not none')
                pid_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, '{}.pid'.format(instance_uuid))
                pid = int(self.os.read_file(pid_file))
                if self.operating_system.lower == 'linux':
                    self.logger.info('stop_fdu()', 'Native Plugin - PID {}'.format(pid))
                    self.os.execute_command('sudo pkill -9 -P {}'.format(pid),blocking=True, external=False)
                if self.os.check_if_pid_exists(pid):
                    self.os.send_sig_int(pid)
                    time.sleep(3)
                if self.os.check_if_pid_exists(pid):
                    self.os.send_sig_kill(pid)
            fdu.on_stop()
            self.current_fdus.update({instance_uuid: fdu})
            self.update_fdu_status(fdu_uuid, instance_uuid, 'CONFIGURE')
            self.logger.info('stop_fdu()', '[ DONE ] Native Plugin - Stopped BE uuid {}'.format(instance_uuid))


    def pause_fdu(self, instance_uuid):
        fdu = self.current_fdus.get(instance_uuid, None)
        if fdu is None:
            self.logger.error('stop_fdu()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('FDU not existing',
                                             'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
        else:
            fdu_uuid = fdu.get_fdu_id()
            self.logger.error('pause_fdu','Cannot pause native!!')
            self.write_fdu_error(fdu_uuid, instance_uuid, 7, 'Instance cannot be paused')

    def resume_fdu(self, instance_uuid):
        fdu = self.current_fdus.get(instance_uuid, None)
        if fdu is None:
            self.logger.error('stop_fdu()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('FDU not existing',
                                             'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
        else:
            fdu_uuid = fdu.get_fdu_id()
            self.logger.error('resume_fdu','Cannot resume native!!')
            self.write_fdu_error(fdu_uuid, instance_uuid, 7, 'Instance cannot be resumed')

    def migrate_fdu(self, instance_uuid):
        record = self.connector.loc.desired.get_node_fdu(self.node, self.uuid, '*', instance_uuid)
        fdu_uuid = record.get('fdu_id')
        destination = record.get('migration_properties').get('destination')
        if destination != self.node:
            fdu = self.current_fdus.get(instance_uuid, None)
            if fdu is None:
                self.logger.error('stop_fdu()', 'Native Plugin - FDU not exists')
                raise FDUNotExistingException('FDU not existing',
                                                'FDU {} not in runtime {}'.format(instance_uuid, self.uuid))
            else:
                fdu_uuid = fdu.get_fdu_id()
                self.logger.error('pause_fdu','Cannot migrate native!!')
                self.write_fdu_error(fdu_uuid, instance_uuid, 7, 'Instance cannot be migrated')
        else:
            self.connector.loc.actual.remove_node_fdu(self.node, self.uuid, fdu_uuid, instance_uuid)


    def __execute_command(self, command, out_file):
        f = open(out_file, 'w')
        if self.operating_system.lower() == 'windows':
            p = psutil.Popen(['PowerShell', '-File', command], shell=True, stdout=f, stderr=f)
        else:
            # cmd = 'sh -c {}'.format(command)
            cmd_splitted = command.split()
            self.logger.info('__execute_command()', 'CMD SPLIT = {}'.format(cmd_splitted))
            p = psutil.Popen(cmd_splitted, shell=False, stdout=f, stderr=f)
        self.logger.info('__execute_command()', 'PID = {}'.format(p.pid))
        return p

    def __generate_run_script(self, cmd, args, directory, outfile):
        if self.operating_system.lower() == 'windows':
            if len(args) == 0:
                self.logger.info('__generate_run_script()', ' Native Plugin - Generating run script for Windows')
                template_script = self.os.read_file(os.path.join(self.DIR, 'templates', 'run_native_windows.ps1'))
                na_script = Environment().from_string(template_script)
                if directory:
                    cmd = os.path.join(directory,cmd)
                na_script = na_script.render(command=cmd, outfile=outfile)
            else:
                args = json.dumps(args)[1:-1]
                template_script = self.os.read_file(os.path.join(self.DIR, 'templates', 'run_native_windows_args.ps1'))
                na_script = Environment().from_string(template_script)
                if directory:
                    cmd = os.path.join(directory, cmd)
                na_script = na_script.render(command=cmd,args_list=args, outfile=outfile)

        else:
            self.logger.info('__generate_run_script()', ' Native Plugin - Generating run script for Linux')
            if directory is None:
                template_script = self.os.read_file(os.path.join(self.DIR, 'templates', 'run_native_unix2.sh'))
            else:
                template_script = self.os.read_file(os.path.join(self.DIR, 'templates', 'run_native_unix.sh'))
            na_script = Environment().from_string(template_script)
            if directory:
                p = directory
            else:
                p = self.BASE_DIR
            if len(args)>0:
                cmd = cmd + ' {}'.format(' '.join(args))
            na_script = na_script.render(path=p,command=cmd, outfile=outfile)
        return na_script


    def __fdu_observer(self, fdu_info):
        self.logger.info('__fdu_observer()', ' Native Plugin - New Action of a FDU - FDU Info: {}'.format(fdu_info))
        action = fdu_info.get('status')
        fdu_uuid = fdu_info.get('uuid')
        react_func = self.__react(action)
        try:
            if action == 'UNDEFINE':
                self.logger.info('__fdu_observer()', ' Native Plugin - This is a remove for : {}'.format(fdu_info))
                self.undefine_fdu(fdu_uuid)
            elif action == 'DEFINE':
                self.logger.info('__fdu_observer()', ' Native Plugin - This is a define for : {}'.format(fdu_info))
                self.define_fdu(fdu_info)
            elif react_func is not None:
                react_func(fdu_uuid)
            else:
                self.logger.info('__fdu_observer()', ' Native Plugin - Action not recognized : {}'.format(action))
        except FDUNotExistingException as nex:
            self.write_fdu_error(fdu_info.get('fdu_uuid'), fdu_uuid, 9, nex)
            time.sleep(10)
            self.connector.loc.actual.remove_node_fdu(self.node, self.uuid, fdu_info.get('fdu_uuid'), fdu_uuid)
            return
        except StateTransitionNotAllowedException as stna:
            self.write_fdu_error(fdu_info.get('fdu_uuid'), fdu_uuid, 10, stna)
            time.sleep(5)
            fdu = self.current_fdus.get(fdu_uuid)
            self.update_fdu_status(fdu_info.get('fdu_uuid'), fdu_uuid,fdu.status)
            return


    def __react(self, action):
        r = {
            'CONFIGURE': self.configure_fdu,
            'STOP': self.stop_fdu,
            'RESUME': self.resume_fdu,
            'RUN': self.run_fdu,
            'CLEAN': self.clean_fdu,
            'LAND': self.migrate_fdu,
            'TAKE_OFF': self.migrate_fdu
        }
        return r.get(action, None)

    def __force_fdu_termination(self, fdu_uuid):
        self.logger.info('__force_fdu_termination()', ' Native Plugin - Stop a FDU uuid {} '.format(fdu_uuid))
        fdu = self.current_fdus.get(fdu_uuid, None)
        if fdu is None:
            self.logger.error('__force_fdu_termination()', 'Native Plugin - FDU not exists')
            raise FDUNotExistingException('Native not existing',
                                             'FDU {} not in runtime {}'.format(fdu_uuid, self.uuid))
        else:
            if fdu.get_status() == State.PAUSED:
                self.resume_fdu(fdu_uuid)
                self.stop_fdu(fdu_uuid)
                self.clean_fdu(fdu_uuid)
                self.undefine_fdu(fdu_uuid)
            if fdu.get_status() == State.RUNNING:
                self.stop_fdu(fdu_uuid)
                self.clean_fdu(fdu_uuid)
                self.undefine_fdu(fdu_uuid)
            if fdu.get_status() == State.CONFIGURED:
                self.clean_fdu(fdu_uuid)
                self.undefine_fdu(fdu_uuid)
            if fdu.get_status() == State.DEFINED:
                self.undefine_fdu(fdu_uuid)


def read_file(file_path):
    data = ''
    with open(file_path, 'r') as f:
        data = f.read()
    return data


if __name__ == '__main__':
    if len(sys.argv) < 2:
        exit(-1)
    print('ARGS {}'.format(sys.argv))
    file_dir = os.path.dirname(__file__)
    manifest = json.loads(read_file(sys.argv[1]))
    na = Native(manifest.get('name'), manifest.get('version'), manifest.get(
        'uuid'), manifest)
    na.start_runtime()



