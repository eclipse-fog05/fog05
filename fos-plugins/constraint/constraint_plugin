#!/usr/bin/env python3

# Copyright (c) 2014,2018 ADLINK Technology Inc.
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors: Gabriele Baldoni, ADLINK Technology Inc. - Base plugins set

import sys
import os
import uuid
import psutil
import json
import time
import signal
import shutil
import subprocess
from fog05.interfaces.States import State
from fog05.interfaces.Plugin import *
from fog05 import Yaks_Constraint_Connector
from NativeFDU import NativeFDU
from jinja2 import Environment
from fog05.DLogger import DLogger
from mvar import MVar
from subprocess import PIPE


class ConstraintNode(Plugin):

    def __init__(self, name, version, plugin_uuid, manifest):
        super(ConstraintNode, self).__init__(version, plugin_uuid)
        self.name = name
        loc = manifest.get('configuration').get('ylocator').split('/')[1]
        self.configuration = manifest.get('configuration', {})
        self.connector = Yaks_Constraint_Connector(loc)
        self.logger = DLogger(debug_flag=True)
        self.node = manifest.get('configuration').get('agent')
        self.self_node = manifest.get('configuration').get('nodeid')
        self.manifest = manifest
        self.pid = os.getpid()
        self.var = MVar()

        self.get_agent()

        osinfo = {
            'uuid': manifest.get('uuid'),
            'name': 'rpi1',
            'os': 'linux',
            'cpu': [],
            'ram': {'size': 0.5},
            'disks': [],
            'io': [
                {
                    'name': 'gpiochip0',
                    'io_type': 'gpio',
                    'io_file': '/dev/gpiochip0',
                    'available': True
                }
            ],
            'accelerator': [],
            'network': []
        }

        self.connector.actual.add_node_information(self.self_node, osinfo)

        self.operating_system = osinfo.get('os')

        self.logger.info(
            '__init__()', ' Hello from Constraint Plugin - Running on {}'.format(self.operating_system))
        file_dir = os.path.dirname(__file__)
        self.DIR = os.path.abspath(file_dir)

        self.BASE_DIR = self.configuration.get('path')
        self.LOG_DIR = 'logs'
        self.STORE_DIR = 'apps'

        self.current_fdus = {}

        signal.signal(signal.SIGINT, self.__catch_signal)
        signal.signal(signal.SIGTERM, self.__catch_signal)

    def __catch_signal(self, signal, _):
        if signal in [2, 15]:
            self.var.put(signal)

    def start_runtime(self):

        if os.path.isdir(self.BASE_DIR):
            self.logger.info('start_runtime()',
                             ' Constraint Plugin - Dir exists!')
            if not os.path.isdir(os.path.join(self.BASE_DIR, self.STORE_DIR)):
                os.makedirs(os.path.join(self.BASE_DIR, self.STORE_DIR))
            if not os.path.isdir(os.path.join(self.BASE_DIR, self.LOG_DIR)):
                os.makedirs(os.path.join(self.BASE_DIR, self.LOG_DIR))
        else:
            self.logger.info('start_runtime()',
                             ' Constraint Plugin - Dir not exists!')
            os.makedirs(os.path.join(self.BASE_DIR))
            os.makedirs(os.path.join(self.BASE_DIR, self.STORE_DIR))
            os.makedirs(os.path.join(self.BASE_DIR, self.LOG_DIR))

        self.connector.desired.observe_node_runtime_fdus(
            self.self_node, self.uuid, self.__fdu_observer)

        self.manifest.update({'pid': self.pid})
        self.manifest.update({'status': 'running'})
        self.connector.actual.add_node_plugin(
            self.self_node, self.uuid, self.manifest)

        self.logger.info('start_runtime()', ' Constraint Plugin - Started...')

        r = self.var.get()
        self.stop_runtime()
        self.connector.close()
        exit(0)

    def stop_runtime(self):
        self.logger.info(
            'stopRuntime()', ' Constraint Plugin - Destroy running BE')
        for k in list(self.current_fdus.keys()):
            fdu = self.current_fdus.get(k)
            self.__force_fdu_termination(k)
            if fdu.get_state() == State.DEFINED:
                self.undefine_fdu(k)
        self.logger.info('stopRuntime()', '[ DONE ] Constraint Plugin - Bye')
        return True

    def execute_command(self, command, blocking=False, external=False):
        self.logger.info(
            'execute_command()', 'Constraint Plugin executing command {}'.format(command))
        r = ''
        if external:
            os.system(command)
        else:
            cmd_splitted = command.split()
            p = psutil.Popen(cmd_splitted, stdout=PIPE)
            if blocking:
                p.wait()
            for line in p.stdout:
                r = r + str(line)
                self.logger.debug('execute_command()', str(line))
        return r

    def download_file(self, url, file_path):
        wget_cmd = 'wget {} -O {}'.format(url, file_path)
        return self.execute_command(wget_cmd, blocking=True)

    def store_file(self, content, file_path, filename):
        self.logger.info(
            'store_file()', 'Called for: {}/{}'.format(file_path, filename))
        full_path = os.path.join(file_path, filename)
        f = open(full_path, 'w')
        f.write(content)
        f.flush()
        f.close()
        self.logger.info(
            'store_file()', 'Stored: {} bytes'.format(len(content)))
        return True

    def read_file(self, file_path, root=False):
        self.logger.info('read_file()', 'Arguments: {}'.format(locals()))
        data = ''
        if root:
            file_path = 'sudo cat {}'.format(file_path)
            process = subprocess.Popen(
                file_path.split(), stdout=subprocess.PIPE)
            for line in iter(process.stdout.readline, ''):
                data = data + '{}'.format(line)
        else:
            with open(file_path, 'r') as f:
                data = f.read()
        self.logger.info(
            'read_file()', ' {} bytes read from file'.format(len(data)))
        return data

    def check_if_pid_exists(self, pid):
        try:
            os.kill(pid, 0)
        except OSError:
            return False
        else:
            return True

    def define_fdu(self, fdu_record):

        fdu_uuid = fdu_record.get('fdu_uuid')
        descriptor = self.agent.get_fdu_info(fdu_uuid)
        out_file = 'native_{}.log'.format(fdu_uuid)
        fdu = NativeFDU.from_descriptor(descriptor)

        self.logger.info('define_fdu()', ' Constraint Plugin - Define BE FDU')
        self.logger.info(
            'define_fdu()', ' Constraint Plugin - FDU is {}'.format(fdu))

        if fdu.image is not None and fdu.get_image_uri().startswith('http'):
            zip_name = fdu.get_image_uri().split('/')[-1]
            zip_file = os.path.join(
                self.BASE_DIR, self.STORE_DIR, fdu_uuid, zip_name)
            dest = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid)
            # entity.source = os.path.join(dest,entity.command)
            if zip_name.endswith('.tar.gz'):
                unzip_cmd = 'tar -zxvf {} -C {}'.format(zip_file, dest)
            else:
                unzip_cmd = 'unzip {} -d {}'.format(zip_file, dest)

            os.makedirs(os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid))
            self.download_file(fdu.get_image_uri(), os.path.join(
                self.BASE_DIR, self.STORE_DIR, fdu_uuid, zip_name))
            self.execute_command(unzip_cmd, blocking=True, external=True)
            fdu.source = dest
        else:
            fdu.source = None

        fdu.set_state(State.DEFINED)
        self.current_fdus.update({fdu_uuid: fdu})
        na_info = self.connector.desired.get_node_fdu(
            self.self_node, self.uuid, fdu_uuid)
        na_info.update({'status': 'DEFINE'})
        self.connector.actual.add_node_fdu(
            self.self_node, self.uuid, fdu_uuid, na_info)
        self.logger.info(
            'define_fdu()', ' Constraint Plugin - Defined BE FDU uuid {}'.format(fdu_uuid))
        return fdu_uuid

    def undefine_fdu(self, fdu_uuid):
        self.logger.info(
            'undefine_fdu()', ' Constraint Plugin - Undefine BE FDU uuid {}'.format(fdu_uuid))
        fdu = self.current_fdus.get(fdu_uuid, None)
        if fdu is None:
            self.logger.error('undefine_fdu()',
                              'Constraint Plugin - FDU not exists')
            raise ValueError(
                'FDU not existing FDU {} not in runtime {}'.format(fdu_uuid, self.uuid))
        elif fdu.get_state() != State.DEFINED:
            self.logger.error(
                'undefine_fdu()', 'Constraint Plugin - FDU state is wrong, or transition not allowed')
            raise ValueError(
                'FDU is not in DEFINED state FDU {} is not in DEFINED state'.format(fdu_uuid))
        else:
            shutil.rmtree(os.path.join(
                self.BASE_DIR, self.STORE_DIR, fdu_uuid))
            self.current_fdus.pop(fdu_uuid, None)
            self.connector.actual.remove_node_fdu(
                self.self_node, self.uuid, fdu_uuid)
            self.logger.info(
                'undefine_fdu()', '[ DONE ] Constraint Plugin - Undefine BE FDU uuid {}'.format(fdu_uuid))
            return True

    def configure_fdu(self, fdu_uuid):

        self.logger.info(
            'configure_fdu()', ' Constraint Plugin - Configure BE FDU uuid {}'.format(fdu_uuid))
        fdu = self.current_fdus.get(fdu_uuid, None)
        if fdu is None:
            self.logger.error('configure_fdu()',
                              'Constraint Plugin - FDU not exists')
            raise ValueError(
                'FDU not existing FDU {} not in runtime {}'.format(fdu_uuid, self.uuid))
        elif fdu.get_state() != State.DEFINED:
            self.logger.error(
                'configure_fdu()', 'FDU Plugin - Entity state is wrong, or transition not allowed')
            raise ValueError(
                'FDU is not in DEFINED state FDU {} is not in DEFINED state'.format(fdu_uuid))
        else:
            out_file = 'native_{}.log'.format(fdu_uuid)
            out_file = os.path.join(self.BASE_DIR, self.LOG_DIR, out_file)
            fdu.outfile = out_file
            native_dir = os.path.join(
                self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
            os.makedirs(native_dir)
            with open(fdu.outfile, 'a'):
                os.utime(fdu.outfile, None)
            fdu.on_configured()

            self.logger.info('configure_fdu()',
                             ' Constraint Plugin - FDU is {}'.format(fdu))

            self.current_fdus.update({fdu_uuid: fdu})
            na_info = self.connector.actual.get_node_fdu(
                self.self_node, self.uuid, fdu_uuid)
            na_info.update({'status': 'CONFIGURE'})
            # TODO: this should be an update when YAKS will implement update
            self.connector.actual.add_node_fdu(
                self.self_node, self.uuid, fdu_uuid, na_info)
            self.logger.info(
                'configure_fdu()', '[ DONE ] Constraint Plugin - Configure BE FDU uuid {}'.format(fdu_uuid))
            return True

    def clean_fdu(self, fdu_uuid):
        self.logger.info(
            'clean_fdu()', ' FDU Plugin - Clean BE uuid {}'.format(fdu_uuid))
        fdu = self.current_fdus.get(fdu_uuid, None)
        if fdu is None:
            self.logger.error(
                'clean_fdu()', 'Constraint Plugin - FDU not exists')
            raise ValueError(
                'FDU not existing FDU {} not in runtime {}'.format(fdu_uuid, self.uuid))
        elif fdu.get_state() != State.CONFIGURED:
            self.logger.error(
                'clean_fdu()', 'Constraint Plugin - FDU state is wrong, or transition not allowed')
            raise ValueError(
                'FDU is not in CONFIGURED state FDU {} is not in CONFIGURED state'.format(fdu_uuid))
        else:

            os.remove(fdu.outfile)
            native_dir = os.path.join(
                self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
            shutil.rmtree(native_dir)

            fdu.on_clean()
            self.current_fdus.update({fdu_uuid: fdu})
            na_info = self.connector.actual.get_node_fdu(
                self.self_node, self.uuid, fdu_uuid)
            na_info.update({'status': 'DEFINE'})
            # TODO: this should be an update when YAKS will implement update
            self.connector.actual.add_node_fdu(
                self.self_node, self.uuid, fdu_uuid, na_info)
            self.logger.info(
                'clean_fdu()', '[ DONE ] Constraint Plugin - Clean BE uuid {}'.format(fdu_uuid))
            return True

    def run_fdu(self, fdu_uuid):
        self.logger.info(
            'run_fdu()', ' Constraint Plugin - Starting BE uuid {}'.format(fdu_uuid))
        fdu = self.current_fdus.get(fdu_uuid, None)
        if fdu is None:
            self.logger.error(
                'run_fdu()', 'Constraint Plugin - FDU not exists')
            raise ValueError('FDU not existing',
                             'FDU {} not in runtime {}'.format(fdu_uuid, self.uuid))
        elif fdu.get_state() != State.CONFIGURED:
            self.logger.error(
                'run_fdu()', 'Constraint Plugin - FDU state is wrong, or transition not allowed')
            raise ValueError('FDU is not in CONFIGURED state',
                             'FDU {} is not in CONFIGURED state'.format(fdu_uuid))
        else:
            self.logger.info(
                'run_fdu()', 'Constraint Plugin - FDU is {}'.format(fdu))
            if fdu.source is not None:
                native_dir = os.path.join(
                    self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
                source_dir = os.path.join(
                    self.BASE_DIR, self.STORE_DIR, fdu_uuid)
                pid_file = os.path.join(
                    self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, fdu_uuid)
                run_script = self.__generate_run_script(
                    fdu.command, fdu.args, source_dir, pid_file)

                self.store_file(run_script, native_dir,
                                '{}_run.sh'.format(fdu_uuid))
                chmod_cmd = 'chmod +x {}'.format(os.path.join(
                    native_dir, '{}_run.sh'.format(fdu_uuid)))
                self.execute_command(chmod_cmd, blocking=True)
                cmd = '{}'.format(os.path.join(
                    native_dir, '{}_run.sh'.format(fdu_uuid)))

                process = self.__execute_command(cmd, fdu.outfile)
                time.sleep(1)
                # pid_file = '{}.pid'.format(fdu_uuid)
                # pid_file = os.path.join(self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, pid_file)
                pid = int(self.read_file(pid_file))
                fdu.on_start(pid, process)
            else:
                # try to inject the pid file if script use {{pid_file}}
                '''
                This make possible to add on the launch file of you native application that fog05 can inject the pid output file
                in this way is possible to fog05 to correct send signal to your application, in the case the {{pid_file}} is not defined the script
                will not be modified
                '''
                native_dir = os.path.join(
                    self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name)
                f_name = '{}_run.sh'.format(fdu_uuid)
                pid_file = os.path.join(
                    self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, fdu_uuid)
                template_sh = self.read_file(os.path.join(
                    self.DIR, 'templates', 'run_native_unix2.sh'))
                na_script = Environment().from_string(template_sh)
                cmd = '{} {}'.format(fdu.command, ' '.join(fdu.args))
                na_script = na_script.render(command=cmd, outfile=pid_file)
                self.logger.info(
                    'run_fdu()', '[ INFO ] Lenght of runscript is {}'.format(len(na_script)))
                self.store_file(na_script, native_dir, f_name)
                chmod_cmd = 'chmod +x {}'.format(
                    os.path.join(native_dir, f_name))
                self.execute_command(chmod_cmd, blocking=True)
                cmd = '{}'.format(os.path.join(native_dir, f_name))

                self.logger.info('run_fdu()', 'Command is {}'.format(cmd))
                process = self.__execute_command(cmd, fdu.outfile)
                fdu.on_start(process.pid, process)

            self.current_fdus.update({fdu_uuid: fdu})

            na_info = self.connector.actual.get_node_fdu(
                self.self_node, self.uuid, fdu_uuid)
            na_info.update({'status': 'RUN'})
            # TODO: this should be an update when YAKS will implement update
            self.connector.actual.add_node_fdu(
                self.self_node, self.uuid, fdu_uuid, na_info)
            self.logger.info(
                'run_fdu()', '[ DONE ] Constraint Plugin - Running BE uuid {}'.format(fdu_uuid))
            return True

    def stop_fdu(self, fdu_uuid):
        self.logger.info(
            'stop_fdu()', ' Constraint Plugin - Stop BE uuid {}'.format(fdu_uuid))
        fdu = self.current_fdus.get(fdu_uuid, None)
        if fdu is None:
            self.logger.error(
                'stop_fdu()', 'Constraint Plugin - FDU not exists')
            raise ValueError('FDU not existing',
                             'FDU {} not in runtime {}'.format(fdu_uuid, self.uuid))
        elif fdu.get_state() != State.RUNNING:
            self.logger.error(
                'stop_fdu()', 'Constraint Plugin - FDU state is wrong, or transition not allowed')
            raise ValueError('FDU is not in RUNNING state',
                             'FDU {} is not in RUNNING state'.format(fdu_uuid))
        else:

            if fdu.source is None:

                pid = fdu.pid
                self.logger.info('stop_fdu()', 'FDU source is none')
                self.logger.info(
                    'stop_fdu()', 'Constraint Plugin - PID {}'.format(pid))
                psutil.Process(pid).send_signal(2)
                f_name = '{}.pid'.format(fdu_uuid)
                f_path = os.path.join(self.BASE_DIR, self.STORE_DIR)
                pid_file = os.path.join(f_path, f_name)
                self.logger.info(
                    'stop_fdu()', 'Check if PID file exists {}'.format(pid_file))
                if os.path.isfile(pid_file):
                    pid = int(self.read_file(pid_file))
                    self.logger.info(
                        'stop_fdu()', 'Constraint Plugin - PID {}'.format(pid))
                    self.execute_command(
                        'sudo pkill -9 -P {}'.format(pid), blocking=True)
                    if self.check_if_pid_exists(pid):
                        psutil.Process(pid).send_signal(2)
                        time.sleep(3)
                    if self.check_if_pid_exists(pid):
                        psutil.Process(pid).send_signal(9)
                pid_file = os.path.join(
                    self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, '{}.pid'.format(fdu_uuid))
                self.logger.info(
                    'stop_fdu()', 'Check if PID file exists {}'.format(pid_file))
                if os.path.isfile(pid_file):
                    pid = int(self.read_file(pid_file))
                    self.logger.info(
                        'stop_fdu()', 'Constraint Plugin - PID {}'.format(pid))
                    self.execute_command(
                        'sudo pkill -9 -P {}'.format(pid), blocking=True)
                    if self.check_if_pid_exists(pid):
                        psutil.Process(pid).send_signal(2)
                        time.sleep(3)
                    if self.check_if_pid_exists(pid):
                        psutil.Process(pid).send_signal(9)
            else:

                self.logger.info('stop_fdu()', 'Instance source is not none')
                pid_file = os.path.join(
                    self.BASE_DIR, self.STORE_DIR, fdu_uuid, fdu.name, '{}.pid'.format(fdu_uuid))
                pid = int(self.read_file(pid_file))
                self.logger.info(
                    'stop_fdu()', 'Constraint Plugin - PID {}'.format(pid))
                self.execute_command(
                    'sudo pkill -9 -P {}'.format(pid), blocking=True)
                if self.check_if_pid_exists(pid):
                    psutil.Process(pid).send_signal(2)
                    time.sleep(3)
                if self.check_if_pid_exists(pid):
                    psutil.Process(pid).send_signal(9)
            fdu.on_stop()
            self.current_fdus.update({fdu_uuid: fdu})
            na_info = self.connector.actual.get_node_fdu(
                self.self_node, self.uuid, fdu_uuid)
            na_info.update({'status': 'CONFIGURE'})
            # TODO: this should be an update when YAKS will implement update
            self.connector.actual.add_node_fdu(
                self.self_node, self.uuid, fdu_uuid, na_info)
            self.logger.info(
                'stop_fdu()', '[ DONE ] Constraint Plugin - Stopped BE uuid {}'.format(fdu_uuid))
            return True

    def pause_fdu(self, fdu_uuid):
        self.logger.warning(
            'pause_fdu()', 'Constraint Plugin - Cannot pause a BE')
        return False

    def resume_fdu(self, fdu_uuid):
        self.logger.warning(
            'pause_fdu()', 'Constraint Plugin - Cannot resume a BE')
        return False

    def __execute_command(self, command, out_file):
        f = open(out_file, 'w')
        if self.operating_system.lower() == 'windows':
            p = psutil.Popen(['PowerShell', '-File', command],
                             shell=True, stdout=f, stderr=f)
        else:
            # cmd = 'sh -c {}'.format(command)
            cmd_splitted = command.split()
            self.logger.info('__execute_command()',
                             'CMD SPLIT = {}'.format(cmd_splitted))
            p = psutil.Popen(cmd_splitted, shell=False, stdout=f, stderr=f)
        self.logger.info('__execute_command()', 'PID = {}'.format(p.pid))
        return p

    def __generate_run_script(self, cmd, args, directory, outfile):
        self.logger.info('__generate_run_script()',
                         ' Constraint Plugin - Generating run script for Linux')
        if directory is None:
            template_script = self.read_file(os.path.join(
                self.DIR, 'templates', 'run_native_unix2.sh'))
        else:
            template_script = self.read_file(os.path.join(
                self.DIR, 'templates', 'run_native_unix.sh'))
        na_script = Environment().from_string(template_script)
        if directory:
            cmd = os.path.join(directory, cmd)
            if len(args) > 0:
                cmd = cmd + ' {}'.format(' '.join(args))
        na_script = na_script.render(command=cmd, outfile=outfile)
        return na_script

    def __fdu_observer(self, fdu_info):
        self.logger.info(
            '__fdu_observer()', ' Constraint Plugin - New Action of a FDU - FDU Info: {}'.format(fdu_info))
        action = fdu_info.get('status')
        fdu_uuid = fdu_info.get('fdu_uuid')
        react_func = self.__react(action)
        if action == 'UNDEFINE':
            self.logger.info(
                '__fdu_observer()', ' Constraint Plugin - This is a remove for : {}'.format(fdu_info))
            self.undefine_fdu(fdu_uuid)
        elif action == 'DEFINE':
            self.logger.info(
                '__fdu_observer()', ' Constraint Plugin - This is a define for : {}'.format(fdu_info))
            self.define_fdu(fdu_info)
        elif react_func is not None:
            react_func(fdu_uuid)
        else:
            self.logger.info(
                '__fdu_observer()', ' Constraint Plugin - Action not recognized : {}'.format(action))

    def __react(self, action):
        r = {
            'CONFIGURE': self.configure_fdu,
            'STOP': self.stop_fdu,
            'RESUME': self.resume_fdu,
            'RUN': self.run_fdu,
            'CLEAN': self.clean_fdu
        }
        return r.get(action, None)

    def __force_fdu_termination(self, fdu_uuid):
        self.logger.info('__force_fdu_termination()',
                         ' Constraint Plugin - Stop a FDU uuid {} '.format(fdu_uuid))
        fdu = self.current_fdus.get(fdu_uuid, None)
        if fdu is None:
            self.logger.error('__force_fdu_termination()',
                              'Constraint Plugin - FDU not exists')
            raise ValueError('Constraint not existing',
                             'FDU {} not in runtime {}'.format(fdu_uuid, self.uuid))
        else:
            if fdu.get_state() == State.PAUSED:
                self.resume_fdu(fdu_uuid)
                self.stop_fdu(fdu_uuid)
                self.clean_fdu(fdu_uuid)
                self.undefine_fdu(fdu_uuid)
            if fdu.get_state() == State.RUNNING:
                self.stop_fdu(fdu_uuid)
                self.clean_fdu(fdu_uuid)
                self.undefine_fdu(fdu_uuid)
            if fdu.get_state() == State.CONFIGURED:
                self.clean_fdu(fdu_uuid)
                self.undefine_fdu(fdu_uuid)
            if fdu.get_state() == State.DEFINED:
                self.undefine_fdu(fdu_uuid)


def read_file(file_path):
    data = ''
    with open(file_path, 'r') as f:
        data = f.read()
    return data


if __name__ == '__main__':
    if len(sys.argv) < 2:
        exit(-1)
    print('ARGS {}'.format(sys.argv))
    file_dir = os.path.dirname(__file__)
    manifest = json.loads(read_file(sys.argv[1]))
    na = ConstraintNode(manifest.get('name'), manifest.get('version'), manifest.get(
        'uuid'), manifest)
    na.start_runtime()
