#!/usr/bin/env python3

# Copyright (c) 2014,2018 ADLINK Technology Inc.
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors: Gabriele Baldoni, ADLINK Technology Inc. - Base plugins set

import uuid
import psutil
from fog05.interfaces.OSPlugin import OSPlugin
from fog05 import Yaks_Connector
from fog05.DLogger import DLogger
from subprocess import PIPE
import subprocess
import re
import platform
import netifaces
import shutil
import socket
import os
import sys
import json
import signal
import time
from yaks import Value
from mvar import MVar


'''
        Redhat and friends: Test for /etc/redhat-release, check contents
        Debian: Test for /etc/debian_version, check contents
        Mandriva and friends: Test for /etc/version, check contents
        Slackware: Test for /etc/slackware-version, check contents
        Ubuntu: test fot /etc/lsb-release, check contents

'''


class MacOs(OSPlugin):
    def __init__(self, name, version, plugin_uuid, yaks_locator, nodeid,
                 manifest):
        super(MacOs, self).__init__(version, plugin_uuid)
        self.name = name
        self.pm = None
        self.node_id = nodeid
        self.logger = DLogger(debug_flag=True)
        self.logger.info('__init__()', ' Hello from MacOS Plugin')
        loc = yaks_locator.split('/')[1]
        self.connector = Yaks_Connector(loc)
        file_dir = os.path.dirname(__file__)
        self.DIR = os.path.abspath(file_dir)
        self.pid = os.getpid()
        self.io_devices = []
        self.nw_devices = []
        self.accelerator_devices = []

        self.io_devices = self.__get_io_devices()
        self.nw_devices = self.__get_nw_devices()
        self.accelerator_devices = self.__get_acc_devices()
        self.var = MVar()

        manifest.update({'pid': self.pid})
        manifest.update({'status': 'loaded'})

        if manifest.get('configuration') is not None:
            if manifest.get('configuration').get('expose'):
                self.logger.info(
                    '__init__()', '[ INIT ] Populating Global Actual Store with data from OS Plugin')
                self.__populate_node_information()
                self.logger.info(
                    '__init__()', '[ DONE ] Populating Actual Store with data from OS Plugin')

        signal.signal(signal.SIGINT, self.__catch_signal)
        # registering evals

        d = {
            'dir_exists': self.dir_exists,
            'create_dir': self.create_dir,
            'download_file': self.download_file,
            'execute_command': self.execute_command,
            'remove_dir': self.remove_dir,
            'create_file': self.create_file,
            'remove_file': self.remove_file,
            'store_file': self.store_file,
            'read_file': self.read_file,
            'file_exists': self.file_exists,
            'send_sig_int': self.send_sig_int,
            'check_if_pid_exists': self.check_if_pid_exists,
            'send_sig_kill': self.send_sig_kill
        }

        for k in d:
            f = d.get(k)
            self.logger.info(
                '__init__()', 'OS Plugin - Registering {}'.format(k))
            self.connector.loc.actual.add_os_eval(self.node_id, k, f)

        manifest.update({'pid': self.pid})
        manifest.update({'status': 'running'})
        self.connector.loc.actual.add_node_plugin(nodeid, self.uuid, manifest)
        self.connector.loc.actual.add_node_os_info(nodeid, manifest)
        print('OS Plugin - Running...')

        r = self.var.get()
        self.connector.close()
        exit(r)

    def __populate_node_information(self):
        node_info = {}
        node_info.update({'uuid': self.node_id})
        node_info.update({'name': self.get_hostname()})
        node_info.update({'os': self.name})
        node_info.update({'cpu': self.get_processor_information()})
        node_info.update({'ram': self.get_memory_information()})
        node_info.update({'disks': self.get_disks_information()})
        node_info.update({'network': self.get_network_informations()})
        node_info.update({'io': self.get_io_informations()})
        node_info.update({'accelerator': self.get_accelerators_informations()})

        self.connector.loc.actual.add_node_information(self.node_id, node_info)

    def get_base_path(self):
        node_conf = self.connector.loc.actual.get_node_configuration(
            self.node_id)
        return node_conf.get('agent').get('path')

    def __execute_command(self, command, blocking=False, external=False):

        self.logger.info('executeCommand()',
                         'OS Plugin executing command {}'.format(command))
        if external:
            os.system(command)
        else:
            cmd_splitted = command.split()
            p = psutil.Popen(cmd_splitted, stdout=PIPE)
            if blocking:
                p.wait()
            # for line in p.stdout:
            #     self.logger.debug('executeCommand()', str(line))
        return True

    def execute_command(self, command, blocking=False, external=False):
        try:
            self.logger.info(
                'executeCommand()', 'OS Plugin executing command {}'.format(command))
            if external:
                os.system(command)
            else:
                cmd_splitted = command.split()
                p = psutil.Popen(cmd_splitted, stdout=PIPE)
                if blocking:
                    p.wait()
                # for line in p.stdout:
                #     self.logger.debug('executeCommand()', str(line))
                res = {'result': True}

        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def add_know_host(self, hostname, ip):
        self.logger.info('addKnowHost()', ' OS Plugin add to hosts file')
        add_cmd = 'sudo {} -a {} {}'.format(os.path.join(
            self.DIR, 'scripts', 'manage_hosts.sh'), hostname, ip)
        self.execute_command("", add_cmd, True)

    def remove_know_host(self, hostname):
        self.logger.info(
            'removeKnowHost()', ' OS Plugin remove from hosts file')
        del_cmd = 'sudo {} -d {}'.format(os.path.join(self.DIR,
                                                      'scripts', 'manage_hosts.sh'), hostname)
        self.execute_command("", del_cmd, True)

    def __dir_exists(self, dir_path):
        return os.path.isdir(dir_path)

    def __file_exists(self, file_path):
        return os.path.isfile(file_path)

    def dir_exists(self, dir_path):
        self.logger.info(
            'dir_exists()', ' Called for {}'.format(dir_path))
        try:
            res = {'result': os.path.isdir(dir_path)}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            self.logger.info(
                'dir_exists()', ' Called for {}'.format(dir_path))
            return res

    def create_dir(self, dir_path):
        try:
            if not self.__dir_exists(dir_path):
                res = {'result': os.makedirs(dir_path)}
            else:
                res = {'result': False}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def create_file(self, file_path):
        try:
            if not self.__file_exists(file_path):
                with open(file_path, 'a'):
                    os.utime(file_path, None)
            res = {'result': True}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def remove_dir(self, dir_path):
        try:
            if not self.__dir_exists(dir_path):
                res = {'result': shutil.rmtree(dir_path)}
            else:
                res = {'result': False}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def remove_file(self, file_path):
        try:
            res = {'result': os.remove(file_path)}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except FileNotFoundError as e:
            self.logger.error(
                'removeFile()', 'OS Plugin File Not Found {} so don\'t need to remove'.format(e.strerror))
            res = {'error': e.errno}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def file_exists(self, file_path):
        try:
            res = {'result': os.path.isfile(file_path)}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def store_file(self, content, file_path, filename):
        try:
            full_path = os.path.join(file_path, filename)
            f = open(full_path, 'w')
            f.write(content)
            f.flush()
            f.close()
            res = {'result': True}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def read_file(self, file_path, root=False):
        self.logger.info('read_file()', 'Arguments: {}'.format(locals()))
        try:
            data = ''
            if root:
                file_path = 'sudo cat {}'.format(file_path)
                process = subprocess.Popen(
                    file_path.split(), stdout=subprocess.PIPE)
                # read one line at a time, as it becomes available
                for line in iter(process.stdout.readline, ''):
                    data = data + '{}'.format(line)
            else:
                with open(file_path, 'r') as f:
                    data = f.read()
            res = {'result': data}
        except TypeError as e:
            self.logger.error('read_file()', 'Error: {}'.format(e))
            res = {'error': 0}
        except (Exception, RuntimeError) as e:
            self.logger.error('read_file()', 'Exception: {}'.format(e))
            res = {'error': -1}
        finally:
            return res

    def read_binary_file(self, file_path):
        data = None
        with open(file_path, 'rb') as f:
            data = f.read()
        return data

    def download_file(self, url, file_path):
        try:
            wget_cmd = 'wget {} -O {}'.format(url, file_path)
            res = self.__execute_command(wget_cmd, True)
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def get_CPU_level(self):
        return psutil.cpu_percent(interval=1)

    def get_memory_level(self):
        return psutil.virtual_memory().percent

    def get_storage_level(self):
        return psutil.disk_usage('/').percent

    def __check_if_pid_exists(self, pid):
        try:
            os.kill(pid, 0)
        except OSError:
            return False
        else:
            return True

    def check_if_pid_exists(self, pid):
        try:
            try:
                os.kill(pid, 0)
            except OSError:
                res = {'result': False}
            else:
                res = {'result': True}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def send_signal(self, signal, pid):
        try:
            if self.__check_if_pid_exists(pid) is False:
                self.logger.error(
                    'sendSignal()', 'OS Plugin Process not exists {}'.format(pid))
                res = {'result': False}
            else:
                psutil.Process(pid).send_signal(signal)
                res = {'result': True}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def send_sig_int(self, pid):
        try:
            if self.__check_if_pid_exists(pid) is False:
                self.logger.error(
                    'sendSignal()', 'OS Plugin Process not exists {}'.format(pid))
                res = {'result': False}
            else:
                psutil.Process(pid).send_signal(2)
                res = {'result': True}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def send_sig_kill(self, pid):
        try:
            if self.__check_if_pid_exists(pid) is False:
                self.logger.error(
                    'sendSignal()', 'OS Plugin Process not exists {}'.format(pid))
                res = {'result': False}
            else:
                psutil.Process(pid).send_signal(9)
                res = {'result': True}
        except TypeError as e:
            self.logger.error('executeCommand()', 'Error: {}'.format(e))
            res = {'error': 0}
        except:
            self.logger.error('executeCommand()', 'Exception!!')
            res = {'error': -1}
        finally:
            return res

    def get_network_level(self):
        raise NotImplementedError

    def install_package(self, packages):
        self.pm.installPackage(packages)

    def remove_package(self, packages):
        self.pm.removePackage(packages)

    def get_pid(self, process):
        raise NotImplementedError

    def get_processor_information(self):
        cpu = []
        num_cpu = psutil.cpu_count()
        if len(psutil.cpu_freq(percpu=True)) != 0:
            num_cpu = \
                min(psutil.cpu_count(), len(psutil.cpu_freq(percpu=True)))
        for i in range(0, num_cpu):
            model = self.__get_processor_name()
            try:
                frequency = psutil.cpu_freq(percpu=True)
                if len(frequency) == 0:
                    frequency = self.__get_frequency_from_cpuinfo()
                elif len(frequency) == 1:
                    frequency = frequency[0][2]
                else:
                    frequency = frequency[i][2]
            except AttributeError:
                frequency = self.__get_frequency_from_cpuinfo()
            arch = platform.machine()
            cpu.append({'model': model, 'frequency': frequency, 'arch': arch})
        return cpu

    def get_memory_information(self):
        # conversion to MB
        return {'size': psutil.virtual_memory()[0] / 1024 / 1024}

    def get_disks_information(self):
        disks = []
        for d in psutil.disk_partitions():
            dev = d[0]
            mount = d[1]
            dim = psutil.disk_usage(
                mount)[0] / 1024 / 1024 / 1024  # conversion to gb
            fs = d[2]
            disks.append({'local_address': dev, 'dimension': dim,
                          'mount_point': mount, 'filesystem': fs})
        return disks

    def get_io_informations(self):
        return self.io_devices

    def get_accelerators_informations(self):
        return self.accelerator_devices

    def get_network_informations(self):
        return self.nw_devices

    def get_hostname(self):
        res = ''
        p = psutil.Popen('hostname', stdout=PIPE)
        for line in p.stdout:
            line = line.decode()
            res = res + '{}'.format(line)
        return res.strip()

    def get_position_information(self):
        raise NotImplementedError

    def get_intf_type(self, name):
        if name[:-1] in ['ppp', 'wvdial']:
            itype = 'ppp'
        elif name[:2] in ['wl', 'ra', 'wi', 'at']:
            itype = 'wireless'
        elif name[:2].lower() == 'br':
            itype = 'bridge'
        elif name[:5].lower() == 'virbr':
            itype = 'virtual bridge'
        elif name[:5].lower() == 'lxdbr':
            itype = 'container bridge'
        elif name[:3].lower() == 'tap':
            itype = 'tap'
        elif name[:2].lower() == 'tu':
            itype = 'tunnel'
        elif name.lower() == 'lo':
            itype = 'loopback'
        elif name[:2] in ['et', 'en']:
            itype = 'ethernet'
        elif name[:4] in ['veth', 'vtap']:
            itype = 'virtual'
        else:
            itype = 'unknown'

        return itype

    def __get_processor_name(self):
        command = 'sysctl -n machdep.cpu.brand_string'.split()
        p = psutil.Popen(command, stdout=PIPE)
        for line in p.stdout:
            line = line.decode()
            return line.split('@')[0]
        return ''

    def __get_frequency_from_cpuinfo(self):
        command = 'sysctl -n machdep.cpu.brand_string'.split()
        p = psutil.Popen(command, stdout=PIPE)
        for line in p.stdout:
            line = line.decode()
            return line.split('@')[1]
        return 0.0

    def __get_io_devices(self):
        dev = []
        # gpio_path = '/sys/class/gpio'  # gpiochip0
        # gpio_devices = [f for f in os.listdir(gpio_path) if f not in [
        #     'export', 'unexport']]
        # for d in gpio_devices:
        #     dev.append({'name': d, 'io_type': 'gpio',
        #                 'io_file': gpio_path+os.path.sep+d, 'available': True})

        return dev

    def __get_default_gw(self):
        cmd = 'sudo {}'.format(os.path.join(
            self.DIR, 'scripts', 'default_gw.sh'))
        p = psutil.Popen(cmd.split(), stdout=PIPE)
        p.wait()
        iface = ''
        for line in p.stdout:
            iface = line.decode().strip()

        return iface

    def __get_nw_devices(self):
        # {'default': {2: ('172.16.0.1', 'brq2376512c-13')}, 2: [('10.0.0.1', 'eno4', True), ('172.16.0.1', 'brq2376512c-13', True), ('172.16.1.1', 'brqf110e342-9b', False), ('10.0.0.1', 'eno4', False)]}

        nets = []
        return nets

    def __get_acc_devices(self):
        return []

    def __find_interface_by_name(self, dev_name, dev_list):
        for i, dev in enumerate(dev_list):
            if dev.get('intf_name') == dev_name:
                return i, dev
        return None, None

    def set_interface_unaviable(self, intf_name):
        i, interface_info = self.__find_interface_by_name(
            intf_name, self.nw_devices)
        if i is not None and interface_info is not None:
            interface_info.update({'available': False})
            self.nw_devices[i] = interface_info
            return True
        return False

    def set_interface_available(self, intf_name):
        i, interface_info = self.__find_interface_by_name(
            intf_name, self.nw_devices)
        if i is not None and interface_info is not None:
            interface_info.update({'available': True})
            self.nw_devices[i] = interface_info
            return True
        return False

    def __find_dev_by_name(self, dev_name, dev_list):
        for i, dev in enumerate(dev_list):
            if dev.get('name') == dev_name:
                return i, dev
        return None, None

    def set_io_unaviable(self, io_name):
        i, io_info = self.__find_interface_by_name(io_name, self.io_devices)
        if i is not None and io_info is not None:
            io_info.update({'available': False})
            self.io_devices[i] = io_info
            return True
        return False

    def set_io_available(self, io_name):
        i, io_info = self.__find_interface_by_name(io_name, self.io_devices)
        if i is not None and io_info is not None:
            io_info.update({'available': True})
            self.io_devices[i] = io_info
            return True
        return False

    def set_accelerator_unaviable(self, acc_name):
        i, acc_info = self.__find_interface_by_name(
            acc_name, self.accelerator_devices)
        if i is not None and acc_info is not None:
            acc_info.update({'available': False})
            self.accelerator_devices[i] = acc_info
            return True
        return False

    def set_accelerator_available(self, acc_name):
        i, acc_info = self.__find_interface_by_name(
            acc_name, self.accelerator_devices)
        if i is not None and acc_info is not None:
            acc_info.update({'available': True})
            self.accelerator_devices[i] = acc_info
            return True
        return False

    def __check_distro(self):

        lsb = '/etc/lsb-release'
        deb = '/etc/debian_version'
        rh = '/etc/redhat-release'
        sw = '/etc/slackware-release'
        go = '/etc/gentoo-release'

        if os.path.exists(deb):
            if os.path.exists(lsb):
                return 'ubuntu'
            else:
                return 'debian'
        elif os.path.exists(rh):
            return 'redhat'
        elif os.path.exists(sw):
            return 'slackware'
        elif os.path.exists(go):
            return 'gentoo'
        else:
            return ''

    # def react_to_cache(self, uri, value, v):
    #     self.logger.info(
    #         '__react_to_cache()', 'OS Plugin - React to to URI: {} Value: {} Version: {}'.format(uri, value, v))
    #     print('OS Plugin - React to to URI: {} Value: {} Version: {}'.format(uri, value, v))
    #     method_name = uri.split('/')[-2]
    #     rid = uri.split('/')[-1]
    #     # parameters are kwargs <-> dict
    #     parameters = json.loads(value)
    #     mth = self.get_method(method_name)
    #     ruri = '{}/{}/{}/{}'.format(self.ahome,self.HOME,method_name,rid)
    #     if mth is not None:
    #         try:
    #             res = mth(**parameters)
    #             res = json.dumps({'result': res})
    #             self.store.actual.put(ruri, res)
    #         except TypeError as e:
    #             self.logger.error(
    #                 '__react_to_cache()', ' OS Plugin - Method {} error with parameters Error: {}'.format(method_name, e))
    #             res = json.dumps({'error': 0})
    #             self.store.actual.put(ruri, res)
    #         except:
    #             self.logger.error(
    #                 '__react_to_cache()', ' OS Plugin - Method {} raised exception'.format(method_name))
    #             res = json.dumps({'error': -1})
    #             self.store.actual.put(ruri, res)
    #     else:
    #         self.logger.error(
    #             '__react_to_cache()', ' OS Plugin - Method {} not exists'.format(method_name))

    def get_method(self, method_name):
        d = {
            'dir_exists': self.dir_exists,
            'create_dir': self.create_dir,
            'download_file': self.download_file,
            'execute_command': self.execute_command,
            'remove_dir': self.remove_dir,
            'create_file': self.create_file,
            'remove_file': self.remove_file,
            'store_file': self.store_file,
            'read_file': self.read_file,
            'file_exists': self.file_exists,
            'send_sig_int': self.send_sig_int,
            'check_if_pid_exists': self.check_if_pid_exists,
            'send_sig_kill': self.send_sig_kill

        }
        return d.get(method_name, None)

    def __catch_signal(self, signal, _):
        if signal == 2:
            self.var.put(signal)


def read_file(file_path):
    data = ''
    with open(file_path, 'r') as f:
        data = f.read()
    return data


if __name__ == '__main__':
    if len(sys.argv) < 3:
        exit(-1)
    yakslocator = sys.argv[1]
    nodeid = sys.argv[2]
    print('ARGS {}'.format(sys.argv))
    file_dir = os.path.dirname(__file__)
    manifest = json.loads(
        read_file(os.path.join(file_dir, 'macos_plugin.json')))
    MacOs(manifest.get('name'), manifest.get('version'), manifest.get(
        'uuid'), yakslocator, nodeid, manifest)
