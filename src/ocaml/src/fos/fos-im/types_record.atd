(*********************************************************************************
 * Copyright (c) 2018 ADLINK Technology Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 * Contributors: 1
 *   Gabriele Baldoni (gabriele (dot) baldoni (at) adlinktech (dot) com ) - OCaml implementation
 *********************************************************************************)

type json <ocaml module="Abs_json"> = abstract



type fdur = {
  uuid : string;
  name : string;
  ?description : string option;
  ?base_image : image_type option;
  ?command : string option; (* Present only if hypervisor_type is BARE *)
  computation_requirements : computational_requirements_type;
  hypervisor_type : hv_types;
  ?configuration : string option;
  interfaces : interface_type list;
  io_ports : io_type list;
  ?status : string option;
  connection_points : connection_point_type list;
}


type image_type = {
  ?uri : string option;
  ?checksum : string option;
  format : string;

}

(* This is the flavor *)
type computational_requirements_type =  {
  cpu_arch : string;
  cpu_min_freq : float;
  cpu_min_count: int;
  ram_size_mb : int;
  storage_size_gb : int
}


type hv_types = [
  | BARE
  | KVM
  | KVM_UK
  | XEN
  | XEN_UK
  | LXC
  | DOCKER
]

type conf_types = [
  | SCRIPT
  | CLOUD_INIT
]


type configuration_type = {
  conf_type : conf_types;
  ?cloud_init : string option;
  ?script : string option;
}

type interface_type = {
  name : string;
  status : string;
  is_mgmt : bool;
  if_type : intf_t;
  mac_address : string;
  virtual_interface : vif_type;
  ?cp_id : string option;
}

type vif_type = {
  intf_type : vintf_t;
  vpci : string;
  bandwidth : int;
}


type intf_t = [
  | INTERNAL
  | EXTERNAL
]

type vintf_t = [
  | PARAVIRT
  | FOS_MGMT
  | PCI_PASSTHROUGH
  | SR_IOV
  | VIRTIO
  | E1000
  | RTL8139
  | PCNET
]


type io_t = [
  | GPIO
  | I2C
  | BUS
]

type io_type = {
  name : string;
  io_type : io_t;
  min_io_ports : int
}


type virtual_network_r = {
  uuid : string;
  name : string;
  net_type : vn_type;
  is_mgmt : bool;
  virtual_device : string;
  net_ns : string;
  manager : string;
}


type vn_type = [
  | ELINE
  | ELAN
 ]


type connection_point_type = {
  uuid: string;
  vnet_id : string;
}