(*********************************************************************************
 * Copyright (c) 2018 ADLINK Technology Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 * Contributors: 1
 *   Gabriele Baldoni (gabriele (dot) baldoni (at) adlinktech (dot) com ) - OCaml implementation
 *********************************************************************************)

type json <ocaml module="Abs_json"> = abstract

(* NFV Types
 *  These types are the atd version of the YANG models for
 *  MEC, the mapping should be 1:1
 * json type is used for Not specified fields
*)

(* from ETSI NFV-IFA 011 *)


type pinning_policies = [
  | STATIC
  | DYNAMIC
]


type virtual_cpu_policies = [
  | DEDICATED
  | SHARED
]

type storage_type_enum = [
  | BLOCK
  | OBJECT
  | FILE
]

type key_value_pair = {
  key : string;
  value : string;
}

type virtual_cpu_pinning_data = {
  ?virtual_cpu_pinning_policy <json name="virtualCpuPinningPolicy"> : pinning_policies option;
  ?virtual_cpu_pinning_rule <json name="virtualCpuPinningRule"> : json option;
  virtual_cpu_policy <json name="virtualCpuPolicy"> : virtual_cpu_policies;
}

type virtual_cpu_data = {
  cpu_architecture <json name="cpuArchitecture"> : string;
  num_virtual_cpu <json name="numVirtualCpu"> : int;
  ?virtual_cpu_clock <json name="virtualCpuClock"> : int option; (* in MHz *)
  ?virtual_cpu_oversubscription_policy <json name="virtualCpuOversubscriptionPolicy"> : json option;
  vdu_cpu_requirements <json name="vduCpuRequirements"> : json list;
  virtual_cpu_pinning <json name="virtualCpuPinning"> : virtual_cpu_pinning_data;
}

type virtual_memory_data = {
  virtual_mem_size <json name="virtualMemSize"> : int; (* nn MB *)
  ?virtual_mem_oversubscription_policiy <json name="virtualMemOversubscriptionPolicy"> : json option;
  vdu_mem_requirements <json name="vduMemRequirements"> : json list;
  numa_enabled <json name="numaEnabled"> : bool;
}

type block_storage_data = {
  size_of_storage <json name="sizeOfStorage"> : int; (* in GB*)
  vdu_storage_requirements <json name="vduStorageRequirements"> : json list;
  ?rdma_enabled <json name="rdmaEnabled"> : bool option;
  ?sw_image_desc <json name="swImageDesc"> : string option;
}

type object_storage_data = {
  max_size_of_storage <json name="maxSizeOfStorage"> : int; (* in GB *)
}

type file_storage_data = {
  size_of_storage <json name="sizeOfStorage"> : int; (* in GB *)
  file_system_protocol <json name="fileSystemProtocol"> : string;
  int_virtual_link_desc <json name="intVirtualLinkDesc"> : string;
}

type virtual_storage_data = {
  id : string;
  type_of_stroage <json name="typeOfStroage"> : storage_type_enum;
  ?block_storage_data <json name="blockStorageData"> : block_storage_data option;
  ?object_storage_data <json name="objectStorageData"> : object_storage_data option;
  ?file_storage_data <json name="fileStorageData"> : file_storage_data option;
}


type requests_additonal_capabily_data = {
  requested_additional_capability_name <json name="requestedAdditionalCapabilityName"> : string; (* NFV-IFA 002 *)
  support_mandatory <json name="supportMandatory"> : bool;
  ?min_requested_additional_capabilty_version <json name="minRequestedAdditionalCapabilityVersion"> : string option;
  ?prefered_requested_additional_capbility_version <json name="preferredRequestedAdditionalCapabilityVersion"> : string option;
  target_performance_parameters <json name="targetPerformanceParameters"> : key_value_pair list;
}


type logical_node_requirements = {
  id : string;
  logical_node_requirement_detail <json name="logicalNodeRequirementDetail"> : json list;
}


type virtual_compute_descriptor = {
  vcd_id <json name="virtualComputeDescId"> : string;
  logical_node <json name="logicalNode"> : logical_node_requirements list;
  request_additional_capabilities <json name="requestAdditionalCapabilities"> : requests_additonal_capabily_data list;
  compute_requirements <json name="computeRequirements"> : json list;
  virtual_memory <json name="virtualMemory"> : virtual_memory_data;
  virtual_cpu <json name="virtualCpu"> : virtual_cpu_data;
  virtual_disk <json name="virtualDisk"> : block_storage_data list;
}



type sw_image_descriptor = {
  id : string;
  name : string;
  version : string;
  checksum : string;
  container_format <json name="containerFormat"> : string;
  disk_format <json name="diskFormat"> : string;
  min_disk <json name="minDisk"> : int; (* in GB *)
  ?min_ram <json name="minRam"> : int option; (* in MB *)
  size : int;
  sw_image <json name="swImage"> : string;
  ?operating_system <json name="operatingSystem"> : string option;
  supported_virtualisation_environment <json name="supportedVirtualisationEnvironment"> : string list;
}


type virtual_network_interface_requirement = {
  ?name : string option;
  ?description : string option;
  support_mandatory <json name="supportMandatory"> : bool;
  network_interface_requirements <json name="networkInterfaceRequirements"> : json;
  ?niclo_requirements <json name="nicloRequirements"> : string option;
}


type terminate_vnf_op_config = {
  min_graceful_termination_timeout <json name="minGracefulTerminationTimeout"> : int;
  max_recommended_graceful_termination_timeout <json name="maxRecommendedGracefulTerminationTimeout"> : int;
  parameter : string list;
}


type operate_vnf_op_config = {
  min_graceful_stop_timeout <json name="minGracefulStopTimeout"> : int;
  max_recommended_graceful_stop_timeout <json name="maxRecommendedGracefulStopTimeout"> : int;
  parameter : string list;
}