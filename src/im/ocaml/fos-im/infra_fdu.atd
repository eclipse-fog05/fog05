(*********************************************************************************
 * Copyright (c) 2018 ADLINK Technology Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 * Contributors: 1
 *   Gabriele Baldoni (gabriele (dot) baldoni (at) adlinktech (dot) com ) - IM Updates
 *********************************************************************************)
(* FDU Infrastructure Types *)

type json <ocaml module="Abs_json"> = abstract

type image <ocaml module="Base_fdu"> = abstract
type command <ocaml module="Base_fdu"> = abstract
type computational_requirements <ocaml module="Base_fdu"> = abstract
type geographical_requirements <ocaml module="Base_fdu"> = abstract
type energy_requirements <ocaml module="Base_fdu"> = abstract
type position <ocaml module="Base_fdu"> = abstract
type proximity <ocaml module="Base_fdu"> = abstract
type migr_kind <ocaml module="Base_fdu"> = abstract
type hv_kind <ocaml module="Base_fdu"> = abstract
type conf_types <ocaml module="Base_fdu"> = abstract
type configuration <ocaml module="Base_fdu"> = abstract
type vif_type <ocaml module="Base_fdu"> = abstract
type intf_t <ocaml module="Base_fdu"> = abstract
type vintf_t <ocaml module="Base_fdu"> = abstract
type io_kind <ocaml module="Base_fdu"> = abstract
type io_port <ocaml module="Base_fdu"> = abstract
type storage_kind <ocaml module="Base_fdu"> = abstract
type net_state <ocaml module="Infra_network"> = abstract
type connection_point_record <ocaml module="Infra_network"> = abstract


(* Record Related Types *)

type fdu = record

type record = {
  uuid : string;
  fdu_id : string;
  status : fdu_state;
  ?image : image option;
  ?command : command option; (* Present only if hypervisor_type is BARE *)
  storage : storage_record list;
  computation_requirements : computational_requirements;
  ?geographical_requirements : geographical_requirements option;
  ?energy_requirements : energy_requirements option;
  hypervisor : hv_kind;
  migration_kind :  migr_kind;
  ?configuration : configuration option;
  interfaces : interface list;
  io_ports : io_port list;
  connection_points : connection_point_record list;
  depends_on : string list;
  ?error_code : int option;
  ?error_msg : string option;
  ?migration_properties : migration_properties option;
  hypervisor_info : json;
}


type interface = {
  name : string;
  is_mgmt : bool;
  if_type : intf_t;
  ?mac_address : string option;
  virtual_interface : vif_type;
  ?cp_id : string option;
  ?ext_cp_id : string option;

  vintf_name : string;
  status : net_state;
  ?phy_face : string option;
  ?veth_face_name : string option;
  ?properties : json option;
}

type storage_record = {
  uuid : string;
  storage_id : string;
  storage_type : storage_kind;
  size : int; (* in GB *)
  ?file_system_protocol : string option; (* only in case of FILE storage *)
  ?cp_id : string option; (* only in case of FILE storage *)
}


type fdu_state = [
  | DEFINE
  | CONFIGURE
  | CLEAN
  | RUN
  | STARTING
  | STOP
  | RESUME
  | PAUSE
  | SCALE
  | TAKE_OFF
  | LAND
  | MIGRATE
  | UNDEFINE
  | ERROR
]


(*
type error_code = [
  | DEFINE_ERROR of 1
  | CONFIGURE_ERROR of 2
  | CLEAN_ERROR of 3
  | RUN_ERROR of 4
  | STOP_ERROR of 5
  | PAUSE_ERROR of 6
  | SCALE_ERROR of 7
  | TAKE_OFF_ERROR of 8
  | LAND_ERROR of 9
  | MIGRATE_ERROR of 10
  | UNDEFINE_ERROR of 0
]
*)


type migration_properties = {
  destination : string;
  source : string;
}