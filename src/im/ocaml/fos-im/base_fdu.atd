(*********************************************************************************
 * Copyright (c) 2018 ADLINK Technology Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 * Contributors: 1
 *   Gabriele Baldoni (gabriele (dot) baldoni (at) adlinktech (dot) com ) - IM Updates
 *********************************************************************************)
(* FDU Shared Types *)

type json <ocaml module="Abs_json"> = abstract

type image = {
  ?uuid : string option;
  ?name : string option;
  uri : string;
  checksum : string; (* SHA1SUM *)
  format : string;

}

type command = {
  binary : string;
  args : string list;
}

type geographical_requirements = {
  ?position : position option;
  ?proximity : proximity list option;
}

type energy_requirements = {
  key : string;
}

(* This is the flavor *)
type computational_requirements =  {
  ?name : string option;
  ?uuid : string option;
  cpu_arch : string;
  cpu_min_freq : int;
  cpu_min_count: int;
  ?gpu_min_count : int option;
  ?fpga_min_count : int option;
  ram_size_mb : float;
  storage_size_gb : float;
  ?duty_cycle : float option;
  (*
  ?min_running_time_minutes : int option;
  ?max_running_time_minutes : int option;
  *)
}

type position = {
  lat : string;
  lon : string;
  radius : float;
}

type proximity = {
  neighbour : string;
  radius : float;
}

type migr_kind = [
  | LIVE
  | COLD
]

type hv_kind = [
  | BARE
  | KVM
  | KVM_UK
  | XEN
  | XEN_UK
  | LXD
  | DOCKER
  | MCU
]

type conf_types = [
  | SCRIPT
  | CLOUD_INIT
]


type configuration = {
  conf_type : conf_types;
  script : string;
  ?ssh_keys : string list option;
}


type vif_type = {
  intf_type : vintf_t;
  vpci : string; (* in case of bridged is the name of the bridge*)
  bandwidth : int;
}


type intf_t = [
  | INTERNAL
  | EXTERNAL
  | WLAN  (* then virtual_interface has to be PHYSICAL *)
  | BLUETOOTH (* then virtual_interface has to be PHYSICAL *)
]

type vintf_t = [
  | PARAVIRT
  | FOS_MGMT
  | PCI_PASSTHROUGH
  | SR_IOV
  | VIRTIO
  | E1000
  | RTL8139
  | PCNET
  | PHYSICAL
  | BRIDGED
]


type io_kind = [
  | GPIO
  | I2C
  | BUS
  | COM
  | CAN
]

type io_port = {
  address : string;
  io_kind : io_kind;
  min_io_ports : int
}


type storage_kind = [
  | BLOCK
  | FILE
  | OBJECT
]


(* CPD as ETSI NFV *)

type cp_kind = [
  | VPORT
]
