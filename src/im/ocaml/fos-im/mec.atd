(*********************************************************************************
 * Copyright (c) 2018 ADLINK Technology Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 * Contributors: 1
 *   Gabriele Baldoni (gabriele (dot) baldoni (at) adlinktech (dot) com ) - OCaml implementation
 *********************************************************************************)

(* type json <ocaml module="Abs_json"> = abstract *)

(* MEAO Types
 *  These types are the atd version of the YANG models for
 *  MEC, the mapping should be 1:1
*)

(* type role <ocaml module="Abs_json"> = abstract *)


type serializer_types = [
  | JSON
  | XML
  | PROTOBUF3
]

type transport_types = [
  | REST_HTTP
  | MB_TOPIC_BASED
  | MB_ROUTING
  | MB_PUBSUB
  | RPC
  | RPC_STREAMING
  | WEBSOCKET
]

type tunnel_types = [
  | GTP_U
  | GRE
]

type interface_types = [
  | MAC
  | TUNNEL
  | IP
]

type grant_types = [
  | OAUTH2_AUTORIZATION_CODE
  | OAUTH2_IMPLICIT_GRANT
  | OAUTH2_RESOURCE_OWNER
  | OAUTH2_CLIENT_CREDENTIALS
]

type filter_types = [
  | FLOW
  | PACKET
]

type ip_address_types = [
  | IP_V4
  | IP_V6
]


type filter_action_types = [
  | DROP
  | FORWARD_DECAPSULATED
  | FORWARD_AS_IS
  | PASSTHROUGH
  | DUPLICATE_DECAPSULATED
  | DUPLICATE_AS_IS
]

type oauth_grant_types = [
  | OAUTH2_AUTHORIZATION_CODE
  | OAUTH2_IMPLICIT_GRANT
  | OAUTH2_RESOURCE_OWNER
  | OAUTH2_CLIENT_CREDENTIALS
]

type tunnel_info = {
  tunnel_type <json name="tunnelType"> : tunnel_types;
  tunnel_dst_address <json name="tunnelDstAddress"> : string;
  tunnel_src_address <json name="tunnelStcAddress"> : string;
}

type interface_descriptor = {
  interface_type <json name="interfaceType"> : interface_types;
  ?tunnel_info <json name="tunnelInfo">  : tunnel_info option;
  ?src_mac_address <json name="srcMACAddress"> : string option;
  ?dst_mac_address <json name="dstMACAddress"> : string option;
  ?dst_ip_address <json name="dstIPAddress">  : string option;
}

type traffic_filter = {
  src_address <json name="srcAddress"> : string list;
  dst_addresses <json name="dstAddress"> : string list;
  src_port <json name="srcPort"> : string list;
  dst_port <json name="dstPort"> : string list;
  protocol <json name="Protocol"> : string list;
  token <json name="Token">  : string list;
  src_tunnel_address <json name="srcTunnelAddress"> : string list;
  tgt_tunnel_address <json name="tgtTunnelAddress"> : string list;
  src_tunnel_port <json name="srcTunnelPort"> : string list;
  dst_tunnel_port <json name="dstTunnelPort"> : string list;
  ?qci <json name="qCI"> : int option;
  ?dscp <json name="dSCP"> : int option;
  ?tc <json name="tC"> : int option;
}

(* type security_info_type = {
   oauth2_info : string;
   grants : grant_types list;
   token_endpoint : string;
   } *)

type oauth2_info = {
  grant_types <json name="grantTypes"> : oauth_grant_types;
  ?token_endpoint <json name="tokenEndpoint"> : string option;
}

type security_info = {
  ?oauth2_info <json name="oAuth2Info"> : oauth2_info option;
}
(*  *)


type transport_descriptor = {
  transport_type <json name="type"> : transport_types;
  protocol : string;
  version : string;
  security : security_info;
}

type transport_dependency = {
  labels : string list;
  serializers : serializer_types list;
  transport : transport_descriptor;
}

type category_ref = {
  href : string;
  id : string;
  name : string;
  version : string;
}

type service_dependency = {
  ser_name <json name="serName"> : string;
  ?ser_category <json name="serCategory"> : category_ref option;
  version : string;
  ser_transport_dependency <json name="serTransportDependencies"> : transport_dependency list;
}

type service_descriptor = {
  ser_name <json name="serName"> : string;
  ?ser_category <json name="serCategory"> : category_ref option;
  version : string;
  transport_supported <json name="transportSupported"> : (transport_descriptor * serializer_types list) list
}

type feature_dependency = {
  feature_name <json name="featureName"> : string;
  version : string;
}

type traffic_rule_descriptor = {
  traffic_rule_id <json name="trafficRuleId"> : string;
  filter_type <json name="filterType"> : filter_types;
  priority : int;
  traffic_filter <json name="trafficFilter"> : traffic_filter list;
  action : filter_action_types;
  dst_interface <json name="dstinterface"> : interface_descriptor list;
}

type dns_rule_descriptor = {
  dns_rule_id <json name="dnsRuleId"> : string;
  domain_name <json name="domainName"> : string;
  ip_address_type <json name="ipAddressType"> : ip_address_types;
  ip_addresses<json name="ipAddress">  : string;
  ttl : int;
}

type latency_descriptor = {
  time_unit <json name="timeUnit"> : int;
  latency : string;
}




(* Types defined in NFV *)

type sw_image_descriptor <ocaml_json module="Nfv">  = abstract
type virtual_compute_descriptor <ocaml_json module="Nfv">  = abstract
type virtual_network_interface_requirement <ocaml_json module="Nfv"> = abstract
type virtual_storage_data <ocaml_json module="Nfv"> = abstract
type terminate_vnf_op_config  <ocaml_json module="Nfv"> = abstract
type operate_vnf_op_config  <ocaml_json module="Nfv"> = abstract

type app_external_cpd = {
  virtual_network_interface_requirements <json name="virtualNetworkInterfaceRequirements"> : virtual_network_interface_requirement list;
}


(*
 * AppD Base types
 *
 *)

type appd_descriptor = {
  id <json name="appDId"> : string;
  name <json name="appName"> : string;
  vendor <json name="appProvider"> : string;
  soft_version <json name="appSoftVersion"> : string;
  appd_version <json name="appDVersion"> : string;
  mec_version <json name="mecVersion"> : string list;
  ?app_info_name <json name="appInfoName"> : string option;
  description <json name="appDescription"> : string;
  service_required <json name="appServiceRequired"> : service_dependency list;
  service_optional <json name="appServiceOptional"> : service_dependency list;
  service_produces  <json name="appServiceProduced"> : service_descriptor list;
  feature_required <json name="appFeatureRequired"> : feature_dependency list;
  feature_optional <json name="appFeatureOptional"> : feature_dependency list;
  transport_dependencies <json name="transportDependencies"> : transport_dependency list;
  traffic_rules<json name="appTrafficRule"> : traffic_rule_descriptor list;
  dns_rules <json name="appDNSRule"> : dns_rule_descriptor list;
  latency <json name="appLatency"> : latency_descriptor;
  (* ETSI MEC 010-2 *)
  virtual_compute_descriptor <json name="virtualComputeDescriptor"> : virtual_compute_descriptor;
  sw_image_descriptor <json name="swImageDescriptor"> : sw_image_descriptor;
  virutal_storage_descriptor <json name="virtualStorageDescriptor"> : virtual_storage_data;
  app_ext_cpd <json name="appExtCpd"> : app_external_cpd;
  terminate_app_instance_op_config <json name="terminateAppInstanceOpConfig"> : terminate_vnf_op_config;
  change_app_instance_op_config <json name="changeAppInstanceOpConfig"> : operate_vnf_op_config;
}