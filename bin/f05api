# Copyright (c) 2014,2018 Contributors to the Eclipse Foundation
# 
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors: Gabriele Baldoni, ADLINK Technology Inc. - Initial implementation and API

#!/usr/bin/env python3
from flask import Flask, request
import logging
import json
from fog05 import API
import sys


app = Flask(__name__)
logger = logging.Logger('fog05 rest api')


@app.route('/')
def index():
    return json.dumps({'fog05 REST API': {'version': 0.1}})

# Node


@app.route('/node/info/<node_uuid>', methods=['GET'])
def node_info(node_uuid):

    d = api.node.info(node_uuid)
    return json.dumps({'response': d})


@app.route('/node/list', methods=['GET'])
def node_list():
    v = {'response': api.node.list()}
    return json.dumps(v)


@app.route('/node/plugins/<node_uuid>', methods=['GET'])
def node_plugins(node_uuid):
    v = {'response': api.node.plugins(node_uuid)}
    return json.dumps(v)

# Plugin


@app.route('/plugin/add/<node_uuid>', methods=['PUT'])
def plugin_add(node_uuid=None):
    manifest = json.loads(request.form.get('manifest'))
    if node_uuid is None:
        v = {'response': api.plugin.add(manifest)}
        return json.dumps(v)
    v = {'response': api.plugin.add(manifest, node_uuid)}
    return json.dumps(v)


@app.route('/plugin/list/<node_uuid>', methods=['GET'])
def plugin_list(node_uuid=None):
    if node_uuid is None:
        v = {'response': api.plugin.list()}
        return json.dumps(v)
    v = {'response': api.plugin.list(node_uuid)}
    return json.dumps(v)

# Network


@app.route('/network/remove/<net_uuid>/<node_uuid>', methods=['DELETE'])
def network_remove(net_uuid, node_uuid=None):
    if node_uuid is None:
        v = {'response': api.network.remove(net_uuid)}
        return json.dumps(v)
    v = {'response': api.network.remove(net_uuid, node_uuid)}
    return json.dumps(v)


@app.route('/network/add/<node_uuid>', methods=['PUT'])
def network_add(node_uuid=None):
    manifest = json.loads(request.form.get('manifest'))
    if node_uuid is None:
        v = {'response': api.network.add(manifest)}
        return json.dumps(v)
    v = {'response': api.network.add(manifest, node_uuid)}
    return json.dumps(v)


@app.route('/network/list/<node_uuid>', methods=['GET'])
def network_list(node_uuid=None):
    if node_uuid is None:
        v = {'response': api.network.list()}
        return json.dumps(v)
    v = {'response': api.network.list(node_uuid)}
    return json.dumps(v)

# Entity


@app.route('/entity/<entity_uuid>', methods=['GET'])
def entity_info(entity_uuid):
    v = api.entity.info(entity_uuid)
    return json.dumps(v)


@app.route('/entity/<entity_uuid>/instances', methods=['GET'])
def entity_instances(entity_uuid):
    v = api.entity.instances(entity_uuid)
    return json.dumps(v)


@app.route('/entity/<entity_uuid>/instance/<instance_uuid>', methods=['GET'])
def entity_instance_info(entity_uuid, instance_uuid):
    v = api.entity.instance_info(entity_uuid, instance_uuid)
    return json.dumps(v)


@app.route('/entity/define/<node_uuid>', methods=['PUT'])
def entity_define(node_uuid):
    manifest = request.form.get('manifest')
    v = {'response': api.entity.define(manifest, node_uuid, wait=True)}
    return json.dumps(v)


@app.route('/entity/undefine/<entity_uuid>/<node_uuid>', methods=['DELETE'])
def entity_undefine(entity_uuid, node_uuid):
    v = {'response': api.entity.undefine(entity_uuid, node_uuid, wait=True)}
    return json.dumps(v)


@app.route('/entity/configure/<entity_uuid>/<node_uuid>', methods=['PATCH'])
def entity_configure(entity_uuid, node_uuid):
    v = {'response': api.entity.configure(entity_uuid, node_uuid, None, wait=True)}
    return json.dumps(v)


@app.route('/entity/clean/<entity_uuid>/<instance_uuid>/<node_uuid>', methods=['PATCH'])
def entity_clean(entity_uuid, instance_uuid,node_uuid):
    v = {'response': api.entity.clean(entity_uuid, node_uuid, instance_uuid, wait=True)}
    return json.dumps(v)


@app.route('/entity/run/<entity_uuid>/<instance_uuid>/<node_uuid>', methods=['PATCH'])
def entity_run(entity_uuid, instance_uuid,node_uuid):
    v = {'response': api.entity.run(entity_uuid, node_uuid, instance_uuid, wait=True)}
    return json.dumps(v)


@app.route('/entity/stop/<entity_uuid>/<instance_uuid>/<node_uuid>', methods=['PATCH'])
def entity_stop(entity_uuid, instance_uuid,node_uuid):
    v = {'response': api.entity.stop(entity_uuid, node_uuid, instance_uuid, wait=True)}
    return json.dumps(v)


@app.route('/entity/pause/<entity_uuid>/<instance_uuid>/<node_uuid>', methods=['PATCH'])
def entity_pause(entity_uuid, instance_uuid,node_uuid):
    v = {'response': api.entity.pause(entity_uuid, node_uuid, instance_uuid, wait=True)}
    return json.dumps(v)


@app.route('/entity/resume/<entity_uuid>/<instance_uuid>/<node_uuid>', methods=['PATCH'])
def entity_resume(entity_uuid, instance_uuid,node_uuid):
    v = {'response': api.entity.resume(entity_uuid, node_uuid, instance_uuid, wait=True)}
    return json.dumps(v)


@app.route('/entity/migrate/<entity_uuid>/<instance_uuid>/<node_uuid>/<destination_node_uuid>', methods=['PATCH'])
def entity_migrate(entity_uuid, instance_uuid, node_uuid, destination_node_uuid):
    v = {'response': api.entity.migrate(entity_uuid, node_uuid, instance_uuid, destination_node_uuid, wait=True)}
    return json.dumps(v)

# Image


@app.route('/image/remove/<img_uuid>/<node_uuid>', methods=['DELETE'])
def image_remove(img_uuid, node_uuid=None):
    if node_uuid is None:
        v = {'response': api.image.remove(img_uuid)}
        return json.dumps(v)
    v = {'response': api.image.remove(img_uuid, node_uuid)}
    return json.dumps(v)


@app.route('/image/add/<node_uuid>', methods=['PUT'])
def image_add(node_uuid=None):
    manifest = json.loads(request.form.get('manifest'))
    if node_uuid is None:
        v = {'response': api.image.add(manifest)}
        return json.dumps(v)
    v = {'response': api.image.add(manifest, node_uuid)}
    return json.dumps(v)


@app.route('/image/list/<node_uuid>', methods=['GET'])
def image_list(node_uuid=None):
    if node_uuid is None:
        v = {'response': api.image.list()}
        return json.dumps(v)
    v = {'response': api.image.list(node_uuid)}
    return json.dumps(v)


# Flavor

@app.route('/flavor/remove/<flavor_uuid>/<node_uuid>', methods=['DELETE'])
def flavor_remove(flavor_uuid, node_uuid=None):
    if node_uuid is None:
        v = {'response': api.flavor.remove(flavor_uuid)}
        return json.dumps(v)
    v = {'response': api.flavor.remove(flavor_uuid, node_uuid)}
    return json.dumps(v)


@app.route('/flavor/add/<node_uuid>', methods=['PUT'])
def flavor_add(node_uuid=None):
    manifest = json.loads(request.form.get('manifest'))
    if node_uuid is None:
        v = {'response': api.flavor.add(manifest)}
        return json.dumps(v)
    v = {'response': api.flavor.add(manifest, node_uuid)}
    return json.dumps(v)


@app.route('/flavor/list/<node_uuid>', methods=['GET'])
def flavor_list(node_uuid=None):
    if node_uuid is None:
        v = {'response': api.flavor.list()}
        return json.dumps(v)
    v = {'response': api.flavor.list(node_uuid)}
    return json.dumps(v)


# Onboard/offload


@app.route('/onboard', methods=['PUT'])
def onboard():
    manifest = json.loads(request.form.get('manifest'))
    v = {'response': api.add(manifest)}
    return json.dumps(v)


@app.route('/offload/<entity_uuid>', methods=['PUT'])
def offload(entity_uuid):
    v = {'response': api.remove(entity_uuid)}
    return json.dumps(v)


if __name__ == '__main__':

    port = 5000
    debug = True
    if len(sys.argv) > 1:
        if sys.argv[1] == '--help' or sys.argv[1] == '-h' or sys.argv[1] == 'help':
            print('\nUSAGE:\n\t{} -p port -d debug\n'.format(sys.argv[0]))
            exit(0)
        else:
            idx = 1
            len = len(sys.argv)
            while idx < len:
                if sys.argv[idx] == '-p':
                    port = sys.argv[idx + 1]
                    idx = idx + 2
                elif sys.argv[idx] == '-d':
                    debug = 'true' == sys.argv[idx + 1].upper()
                    idx = idx + 2

    sid = 0
    home = "f05rest"
    print('Starting on port {} with debug {}'.format(port, debug))

    api = API(sysid=sid, store_id=home)
    try:
        app.run(host="0.0.0.0", debug=True, port=port, use_reloader=False)
    finally:
        print("Bye!")
