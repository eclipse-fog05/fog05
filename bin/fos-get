# Copyright (c) 2014,2018 Contributors to the Eclipse Foundation
# 
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors: Gabriele Baldoni, ADLINK Technology Inc. - Initial implementation and API


#!/usr/bin/env python3


from fog05.store import Store

import uuid
import argparse
import pprint
import time




class FOSStore(object):
    def __init__(self, aroot, droot, home):
        self.aroot = aroot #'//dfos/<sys-id>'
        self.ahome = str('{}/{}'.format(aroot, home)) #str('//dfos/<sys-id>/%s' % self.uuid)

        self.droot = droot  # '//dfos/<sys-id>'
        self.dhome = str('{}/{}'.format(droot, home))  # str('//dfos/<sys-id>/%s' % self.uuid)

        self.actual = Store(home, self.aroot, self.ahome, 1024)
        self.desired = Store(home, self.droot, self.dhome, 1024)

    def close(self):
        self.actual.close()
        self.desired.close()


class FOSGetCli(object):

    def __init__(self):
        self.agent = None
        self.store = None
        self.sys_id = 0
        self.aroot = '//afos/{}'.format(self.sys_id)
        self.droot = '//dfos/{}'.format(self.sys_id)
        self.uuid = str(uuid.uuid4())


    def exit(self, exit_code):
        if self.store is not None:
            self.store.close()
        exit(exit_code)

    def __initialize(self):
        self.store = FOSStore(self.aroot, self.droot, self.uuid)

        if len(self.store.actual.discovered_stores) == 0:
            print("Waiting...")
            time.sleep(0.5)
        if len(self.store.desired.discovered_stores) == 0:
            print("Waiting...")
            time.sleep(0.5)

        #pprint.pprint(self.store.desidered.discovered_stores)
        #pprint.pprint(self.store.actual.discovered_stores)

    def __read_file(self, file_path):
        with open(file_path, 'r') as f:
            data = f.read()
        return data

    def get(self, uri):

        v = None

        # if not uri.endswith('/**') and not uri.endswith('/') and not uri.endswith('~'):
        #     uri = uri + '/'
        # el
        if uri.endswith('/**'):
            uri.rstrip('*')

        if uri.startswith('a'):
            v = self.store.actual.resolveAll(uri)
        elif uri.startswith('d'):
            v = self.store.desidered.resolveAll(uri)

        if v is not None or len(v) == 0:
            pprint.pprint(v)
        else:
            print("No value!")




    def main(self):

        parser = argparse.ArgumentParser(description='Fog05 get helper for Store')
        parser.add_argument('-u', '--uri', required=True, type=str, default=False, help='URI')

        kwargs = vars(parser.parse_args())
        self.__initialize()
        self.get(kwargs['uri'])

        self.exit(0)


if __name__ == '__main__':
        c = FOSGetCli()
        c.main()