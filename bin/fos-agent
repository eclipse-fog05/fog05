# Copyright (c) 2014,2018 Contributors to the Eclipse Foundation
# 
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors: Gabriele Baldoni, ADLINK Technology Inc. - Initial implementation and API


#!/usr/bin/env python3

import argparse
import os
import signal
import time
import sys
from fog05.fosagent import FosAgent


class FOSAgentCli(object):

    def __init__(self):
        self.agent = None

    def __catch_signal(self, signo, _):
        if signo in [2, 15, 0]:
            if self.agent is not None:
                self.agent.stop()
                time.sleep(1)

    def __start_node(self, plugin_path, debug, config):
        signal.signal(signal.SIGINT, self.__catch_signal)
        signal.signal(signal.SIGTERM, self.__catch_signal)
        signal.signal(signal.CTRL_BREAK_EVENT, self.__catch_signal)
        signal.signal(signal.CTRL_C_EVENT, self.__catch_signal)
        # TODO check if this also catch CTRL-BREAK on Windows
        self.agent = FosAgent(debug=debug, plugins_path=plugin_path, configuration=config)
        self.agent.run()
        while True:
            time.sleep(100)

    def start(self, plugins, verbose, daemon, config):
        if plugins:
            sys.path.append(os.path.abspath(plugins))
            if daemon:
                print("Cannot demonize on {} at the moment".format(os.name))
                # if os.name == 'posix':
                #     print('Forking in backgroud')
                #     pid = '/tmp/fos.pid'
                #     print('PID file {}'.format(pid))
                #     with dmn.DaemonContext(pidfile=pid, umask=0):
                #         self.__start_node(plugins, verbose)
                # else:
                #     print("Cannot daemonize on {} at the moment".format(os.name))
            else:
                self.__start_node(plugins, verbose, config)
        else:
            print('You should specify plugin path!!')

    def main(self):
        parser = argparse.ArgumentParser(description='fog05 | The Fog-Computing IaaS')
        subparsers = parser.add_subparsers(dest='cmd')

        # START CMD

        parser_start = subparsers.add_parser('start')
        parser_start.add_argument('-p', '--plugins', required=True, type=str, default=False, help='plugin path')
        parser_start.add_argument('-v', '--verbose', action='store_true', default=False, help='Verbose output')
        parser_start.add_argument('-d', '--daemon', action='store_true', default=False, help='Run as a daemon')
        parser_start.add_argument('-c', '--conffile', type=str, default=None, help='agent configuration file')

        subparsers.add_parser('stop')
        kwargs = vars(parser.parse_args())

        if kwargs['cmd'] == 'start':
            self.start(kwargs['plugins'], kwargs['verbose'], kwargs['daemon'], kwargs['conffile'])
        elif kwargs['cmd'] == 'stop':
            print('Not yet...')
            exit(-1)
        else:
            print('This is deprecated and cannot be used')
            exit(-1)


if __name__ == '__main__':
        c = FOSAgentCli()
        c.main()
